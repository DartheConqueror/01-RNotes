#Hypothesis 2
summary(lm(df$targetPlaylistAvgCons ~  df$targetCons + df$selfFirst))
visreg((lm(targetPlaylistAvgCons ~ targetCons, data = df)), "targetCons")
#Analysis
#Hyptothesis 1
summary(lm(df$ownPlaylistAvgCons ~ df$subjCons +  df$selfFirst))
visreg((lm(ownPlaylistAvgCons ~ subjCons, data = df)), "subjCons")
visreg(fit, "ownPlaylistAvgCons", "match", ylab= "targetPlaylistAvgCons", overlay = TRUE)
rm(list=ls())
setwd("C:/Users/The Law/Downloads/Academic/Semester 2/Business Analytics/Projects/Kaggle 1/Given Data")
train <- read.csv("train.csv")
test <- read.csv("test.csv")
View(train)
plot(train$Sex)
plot(train$Survived)
?plot()
plot(train$Sex, train$Survived)
mean(train[train$Pclass == 1 & train$Sex == "male", ]$age)
(train[train$Pclass == 1 & train$Sex == "male", ]$age
print((train[train$Pclass == 1 & train$Sex == "male", ]$age)
print((train[which(train$Pclass == 1 & train$Sex == "male"), ]$age)
mean((train[which(train$Pclass == 1 & train$Sex == "male"), ]$age)
mean((train[which(train$Pclass == 1 & train$Sex == "male"), ]$age)
mean((train[which(train$Pclass == 1), ]$age)
mean((train[which(train$Pclass == 1), ]$age))
mean(train$Age)
mean(train$Age, is.na = FALSE)
?mean()
mean(train$Age, na.rm)
mean(train$Age, na.rm = TRUE)
mean(train[train$Pclass == 1, ]$Age, na.rm = TRUE)
mean(train[train$Pclass == 1 & train$Sex == "male", ]$Age, na.rm = TRUE)
for (i in 1:unique(train$Pclass)) {
mean(train[train$Pclass == i & train$Sex == "male", ]$Age, na.rm = TRUE)
}
print(mean(train[train$Pclass == i & train$Sex == "male", ]$Age, na.rm = TRUE))
print(mean(train[train$Pclass == 1 & train$Sex == "male", ]$Age, na.rm = TRUE))
print(mean(train[train$Pclass == 3 & train$Sex == "male", ]$Age, na.rm = TRUE))
pclassage <- c(1:3)
pclassage <- as.data.frame(pclassage)
colnames(pclassage) <- c("P Class")
View(pclassage)
for (i in 1:unique(train$Pclass)) {
pclassage$male_age[i] <- mean(train[train$Pclass == i & train$Sex == "male", ]$Age, na.rm = TRUE)
pclassage$female_age[i] <- mean(train[train$Pclass == i & train$Sex == "female", ]$Age, na.rm = TRUE)
}
View(pclassage)
plot(pclassage$`P Class`, pclassage$male_age & pclassage$female_age)
plot(pclassage$`P Class`, pclassage$male_age)
#Check for Missing Data
sum(is.na(train))
colnames(train)[colSum(is.na(train)) > 0]
colnames(train)[colSuma(is.na(train)) > 0]
colnames(train)[colSums(is.na(train)) > 0]
#if data is missing from column substitute a 1, else a 0
train$DummyAge <- iselse(is.na(train$Age), 1, 0)
#if data is missing from column substitute a 1, else a 0
train$DummyAge <- ifelse(is.na(train$Age), 1, 0)
#fills missing data with a 0, if no missing values leaves original value
train$Age <- ifelse(is.na(train$Sex), 0, train$Age)
sum(is.na(test))
colnames(train)[colSums(is.na(train)) > 0]
train$DummyAge <- ifelse(is.na(test$Age), 1, 0)
test$DummyAge <- ifelse(is.na(test$Age), 1, 0)
test$Age <- ifelse(is.na(test$Sex), 0, train$Age)
#Logistic Regression Practice
#Titanic Revisited
#Set up----
rm(list=ls())
#Set Working Directeory
setwd("C:/Users/The Law/Downloads/Academic/Semester 2/Business Analytics/Projects/Kaggle 1/Given Data")
#Data
train <- read.csv("train.csv")
test <- read.csv("test.csv")
#Data Understanding----
#Ratio of Sex
plot(train$Sex)
#Average Age of Males and Females on Different Passenger Classes
#age by pclass
pclassage <- c(1:3)
pclassage <- as.data.frame(pclassage)
colnames(pclassage) <- c("Passenger_Class")
for (i in 1:unique(train$Pclass)) {
pclassage$male_age_mean[i] <- mean(train[train$Pclass == i & train$Sex == "male", ]$Age, na.rm = TRUE)
pclassage$female_age_mean[i] <- mean(train[train$Pclass == i & train$Sex == "female", ]$Age, na.rm = TRUE)
}
#Check for Missing Data----
#Total Missing Values
sum(is.na(train))
sum(is.na(test))
#Columns with Missing Values
colnames(train)[colSums(is.na(train)) > 0]
colnames(train)[colSums(is.na(train)) > 0]
#Dummy Variable Approach to Filling in Missing Age
#if data is missing from column substitute a 1, else a 0
train$DummyAge <- ifelse(is.na(train$Age), 1, 0)
test$DummyAge <- ifelse(is.na(test$Age), 1, 0)
#fills missing data with a 0, if no missing values leaves original value
train$Age <- ifelse(is.na(train$Sex), 0, train$Age)
test$Age <- ifelse(is.na(test$Sex), 0, test$Age)
#set working directory
setwd("C:/Users/The Law/Downloads/Academic/Semester 2/Customer Analytics/Cases/CD Now")
#load transaction data and retention data
CDNow.summary.all<-read.csv("CDNow Restructured.csv")
View(CDNow.summary.all)
Titanic_logit <- glm(Survived ~ Sex + Pclass + Age, DummyAge, data=train, family = "binomial")
Titanic_logit <- glm(Survived ~ Sex + Pclass + Age, DummyAge, data=train, family = "binomial")
Titanic_logit <- glm(Survived ~ Sex + Pclass + Age+ DummyAge, data=train, family = "binomial")
summary(Titanic_logit)
#makes predictions using induced model
train$logistic_predictions <- predict(train,type="response")
library(dplyr)
library(ggplot2)
library(cvTools)
library(visreg)
#makes predictions using induced model
train$logistic_predictions <- predict(train,type="response")
#makes predictions using induced model
train$logistic_predictions <- predict(Titanic_logit, train, type="response")
rm(list=ls())
library(dplyr)
library(ggplot2)
library(cvTools)
library(visreg)
#Set Working Directeory
setwd("C:/Users/The Law/Downloads/Academic/Semester 2/Business Analytics/Projects/Kaggle 1/Given Data")
#Data
train <- read.csv("train.csv")
test <- read.csv("test.csv")
#Data Understanding----
#Ratio of Sex
plot(train$Sex)
#Average Age of Males and Females on Different Passenger Classes
#age by pclass
pclassage <- c(1:3)
pclassage <- as.data.frame(pclassage)
colnames(pclassage) <- c("Passenger_Class")
for (i in 1:unique(train$Pclass)) {
pclassage$male_age_mean[i] <- mean(train[train$Pclass == i & train$Sex == "male", ]$Age, na.rm = TRUE)
pclassage$female_age_mean[i] <- mean(train[train$Pclass == i & train$Sex == "female", ]$Age, na.rm = TRUE)
}
#Check for Missing Data----
#Total Missing Values
sum(is.na(train))
sum(is.na(test))
#Columns with Missing Values
colnames(train)[colSums(is.na(train)) > 0]
colnames(train)[colSums(is.na(train)) > 0]
#Dummy Variable Approach to Filling in Missing Age
#if data is missing from column substitute a 1, else a 0
train$DummyAge <- ifelse(is.na(train$Age), 1, 0)
test$DummyAge <- ifelse(is.na(test$Age), 1, 0)
#fills missing data with a 0, if no missing values leaves original value
train$Age <- ifelse(is.na(train$Sex), 0, train$Age)
test$Age <- ifelse(is.na(test$Sex), 0, test$Age)
#Build a Logistic Model----
#Makes a logit and puts it into an object
Titanic_logit <- glm(Survived ~ Sex + Pclass + Age+ DummyAge, data=train, family = "binomial")
summary(Titanic_logit)
#makes predictions using induced model
train$logistic_predictions <- predict(Titanic_logit, train, type="response")
hist(CDNow.summary.all$logisticfit)
#fills missing data with a 0, if no missing values leaves original value
train$Age <- ifelse(is.na(train$Age), 0, train$Age)
test$Age <- ifelse(is.na(test$Age), 0, test$Age)
#Makes a logit and puts it into an object
Titanic_logit <- glm(Survived ~ Sex + Pclass + Age+ DummyAge, data=train, family = "binomial")
summary(Titanic_logit)
#makes predictions using induced model
train$logistic_predictions <- predict(Titanic_logit, train, type="response")
hist(train$Titanic_logit)
hist(train$logistic_predictions)
#Survivorship Predictions as A Function of Each Piece of the Logit
#Sex
plot(train$Sex, train$logistic_predictions)
plot(train$Pclass, train$logistic_predictions)
#Age
plot(train$Age, train$logistic_predictions)
#DummyAge
plot(train$DummyAge, train$logistic_predictions)
train$Log_Predict_Deciles <- ntile(train, 10)
train$Log_Predict_Deciles <- ntile(train$logistic_predictions, 10)
train$Log_Predict_Deciles <- 11 - train$Log_Predict_Deciles
logistic.quantile.summary<-aggregate(train$Survived, by = list(train$Log_Predict_Deciles), FUN = mean)
View(logistic.quantile.summary)
#Changes Column Names
colnames(logistic.quantile.summary)<-c("quantile","retention.percentage")
logistic.quantile.summary$n<-table(train$Log_Predict_Deciles)
#cum sum
logistic.quantile.summary$cum.n<-cumsum(logistic.quantile.summary$n)
View(logistic.quantile.summary)
#Changes Column Names
colnames(logistic.quantile.summary)<-c("quantile","survived.percentage")
#Cum n survived
logistic.quantile.summary$cum.n.survived <- cumsum(logistic.quantile.summary$n.survived)
rm(list=ls())
library(dplyr)
library(ggplot2)
library(cvTools)
library(visreg)
#Set Working Directeory
setwd("C:/Users/The Law/Downloads/Academic/Semester 2/Business Analytics/Projects/Kaggle 1/Given Data")
#Data
train <- read.csv("train.csv")
test <- read.csv("test.csv")
#Data Understanding----
#Ratio of Sex
plot(train$Sex)
#Average Age of Males and Females on Different Passenger Classes
#age by pclass
pclassage <- c(1:3)
pclassage <- as.data.frame(pclassage)
colnames(pclassage) <- c("Passenger_Class")
for (i in 1:unique(train$Pclass)) {
pclassage$male_age_mean[i] <- mean(train[train$Pclass == i & train$Sex == "male", ]$Age, na.rm = TRUE)
pclassage$female_age_mean[i] <- mean(train[train$Pclass == i & train$Sex == "female", ]$Age, na.rm = TRUE)
}
#Check for Missing Data----
#Total Missing Values
sum(is.na(train))
sum(is.na(test))
#Columns with Missing Values
colnames(train)[colSums(is.na(train)) > 0]
colnames(train)[colSums(is.na(train)) > 0]
#Dummy Variable Approach to Filling in Missing Age
#if data is missing from column substitute a 1, else a 0
train$DummyAge <- ifelse(is.na(train$Age), 1, 0)
test$DummyAge <- ifelse(is.na(test$Age), 1, 0)
#fills missing data with a 0, if no missing values leaves original value
train$Age <- ifelse(is.na(train$Age), 0, train$Age)
test$Age <- ifelse(is.na(test$Age), 0, test$Age)
#Build a Logistic Model----
#Makes a logit and puts it into an object
Titanic_logit <- glm(Survived ~ Sex + Pclass + Age+ DummyAge, data=train, family = "binomial")
summary(Titanic_logit)
#makes predictions using induced model
train$logistic_predictions <- predict(Titanic_logit, train, type="response")
hist(train$logistic_predictions)
#Survivorship Predictions as A Function of Each Piece of the Logit
#Sex
plot(train$Sex, train$logistic_predictions)
#PClass
plot(train$Pclass, train$logistic_predictions)
#Age
plot(train$Age, train$logistic_predictions)
#DummyAge
plot(train$DummyAge, train$logistic_predictions)
#Visualize Logit with a Lift Chart----
train$Log_Predict_Deciles <- ntile(train$logistic_predictions, 10)
train$Log_Predict_Deciles <- 11 - train$Log_Predict_Deciles
#Finds Retention Rate in Each Decile
logistic.quantile.summary<-aggregate(train$Survived, by = list(train$Log_Predict_Deciles), FUN = mean)
#Changes Column Names
colnames(logistic.quantile.summary)<-c("quantile","survived.percentage")
overall.responserate <- mean(logistic.quantile.summary$survived.percentage
#finds n of each quantile
logistic.quantile.summary$n<-table(train$Log_Predict_Deciles)
#cum sum
logistic.quantile.summary$cum.n<-cumsum(logistic.quantile.summary$n)
#n survived = n * surived probability
logistic.quantile.summary$n.survived <- logistic.quantile.summary$n * logistic.quantile.summary$survived.percentage
#Cum n survived
logistic.quantile.summary$cum.n.survived <- cumsum(logistic.quantile.summary$n.survived)
#Cum Lift
logistic.quantile.summary$cumlift<-(logistic.quantile.summary$cum.n.surived/logistic.quantile.summary$cum.n)/overall.responserate
overall.responserate <- mean(logistic.quantile.summary$survived.percentage)
#finds n of each quantile
logistic.quantile.summary$n<-table(train$Log_Predict_Deciles)
#cum sum
logistic.quantile.summary$cum.n<-cumsum(logistic.quantile.summary$n)
#n survived = n * surived probability
logistic.quantile.summary$n.survived <- logistic.quantile.summary$n * logistic.quantile.summary$survived.percentage
#Cum n survived
logistic.quantile.summary$cum.n.survived <- cumsum(logistic.quantile.summary$n.survived)
#Cum Lift
logistic.quantile.summary$cumlift<-(logistic.quantile.summary$cum.n.surived/logistic.quantile.summary$cum.n)/overall.responserate
#Cum Lift
logistic.quantile.summary$cumlift <- (logistic.quantile.summary$cum.n.surived/logistic.quantile.summary$cum.n)/overall.responserate
#Cum Lift
logistic.quantile.summary$cumlift <- (logistic.quantile.summary$cum.n.surived/logistic.quantile.summary$cum.n)
#Cum Lift
logistic.quantile.summary$cumlift <- (logistic.quantile.summary$cum.n.survived / logistic.quantile.summary$cum.n)
#Cum Lift
logistic.quantile.summary$cumlift <- (logistic.quantile.summary$cum.n.survived / logistic.quantile.summary$cum.n) / overall.responserate
#Cum Survive Rate
logistic.quantile.summary$cum.survive.rate <- logistic.quantile.summary$cum.n.survived/ogistic.quantile.summary$cum.n
#Cum Survive Rate
logistic.quantile.summary$cum.survive.rate <- logistic.quantile.summary$cum.n.survived/logistic.quantile.summary$cum.n
#Cum Lift
logistic.quantile.summary$cumlift <- logistic.quantile.summary$cum.survive.rate / overall.responserate
overall.responserate <- mean(train$Survived)
#Cum Lift
logistic.quantile.summary$cumlift <- logistic.quantile.summary$cum.survive.rate / overall.responserate
#Plot
plot(logistic.quantile.summary$quantile, logistic.quantile.summary$cumlift)
#Plot
plot(x = logistic.quantile.summary$quantile, y = logistic.quantile.summary$cumlift,
type = "b",
main = "Logistic Regression Cumulative Lift",
ylab = "Cumulative Lift",
xlab = "Decile"
)
abline(1,0, col="red", lwd=5)
#Cross Validation
cvFit(Titanic_logit, y = train$Survived, data = cd, K = 5, R = 5)
#Cross Validation
cvFit(Titanic_logit, y = train$Survived, data = train, K = 5, R = 5)
test$logistic_predictions <- predict(Titanic_logit, test, type="response")
View(test)
test$Survived <- ifelse(test$logistic_predictions > .5, 1, 0)
write.csv(test[c(1,-1), ], file = "submission.csv")
write.csv(test, file = "submission.csv")
submission <- subset(test, select = c(1,-1))
submission <- subset(test, select = c(1, 14))
View(submission)
write.csv(submission, file = "submission.csv")
write.csv(submission, file = "rpracticesubmission.csv")
?cvfit()
?cvFit()
order <- read.csv("order quantity.csv")
order <- read.csv("order quantity.csv")
order <- read.csv("orderquantity.csv")
donation <- read.csv("donation.csv")
donation <- read.csv("donation.csv")
#Set Up ----
setwd("C:/Users/The Law/Downloads/Academic/Semester 2/Customer Analytics/Final Exam")
order <- read.csv("orderquantity.csv")
donation <- read.csv("donation.csv")
rm(list=ls())
#Set Up ----
setwd("C:/Users/The Law/Downloads/Academic/Semester 2/Customer Analytics/Final Exam")
order <- read.csv("orderquantity.csv")
donation <- read.csv("donation.csv")
View(order)
View(order)
ordqty <-lm(Order_Quantity ~ Loyalty , data=order)
summary(ordqty)
#9 Same regression but with income
ordqty2 <-lm(Order_Quantity ~ Loyalty + Income, data=order)
summary(ordqty2)
unique(order$Income)
32.86*6
196.16-38.6
#11 Same regression but with income as categorical
order$catInc <- factor(order$Income)
ordqty3 <-lm(Order_Quantity ~ Loyalty + catInc, data=order)
summary(ordqty3)
order$Income <- ifelse(is.na(order$Income), 0, order$Income)
order$DummyIncome <- ifelse(order$Income == 0, 1, 0)
ordqty4 <-lm(Order_Quantity ~ Loyalty + Income + DummyIncome, data=order)
summary(ordqty4)
-42.86+26.89+164.7
#16 regression with interaction
ordqty5 <-lm(Order_Quantity ~ Loyalty * Income, data=order)
summary(ordqt54)
summary(ordqty5)
library(visreg)
visreg(ordqty5, "Loyalty", by = "Income", data = order)
visreg(ordqty5, "Loyalty", by = "Income", data = order. overlay = TRUE)
visreg(ordqty5, "Loyalty", by = "Income", data = order, overlay = TRUE)
visreg(ordqty5, "Income", by = "Loyalty", data = order, overlay = TRUE)
#Bonus
order$linear_predictions <- predict(ordqty5, order, type = "response")
plot(order$linear_predictions)
plot(y = order$linear_predictions, x = order$Income)
visreg(ordqty5, "Income", by = "Loyalty", data = order, overlay = TRUE)
View(donation)
library(dplyr)
#18 bin all customers
donation$frequencydecile <- ntile(donation$frequency)
#18 bin all customers
donation$frequencydecile <- ntile(donation$frequency, 10)
freq.quantile.summary<-aggregate(donation$donate_11, by = list(donation$frequencydecile), FUN = mean)
View(freq.quantile.summary)
#19 logit recency and freq to predict 2011 donations
donation.logisticfit <- glm(donate_11 ~ recency + frequency, data= donation, family = "binomial")
summary(donation.logisticfit)
#20 predictions using model
donation$logit_predict <- predict(donation.logisticfit, type = "Response")
#20 predictions using model
donation$logit_predict <- predict(donation.logisticfit, type = "response")
overall.response <- mean(donation$logit_predict)
donation$logitdecile <- ntile(donation$logit_predict, 10)
logit.quantile.summary <- aggregate(donation$donate_11, by = list(donation$logitdecile), FUN = mean)
View(logit.quantile.summary)
View(freq.quantile.summary)
#24 cum lift
colnames(logit.quantile.summary)<-c("quantile","retention.percentage")
logit.quantile.summary$n<-table(donation$logitdecile)
logit.quantile.summary$quantile <- 11 - logit.quantile.summary$quantile
logit.quantile.summary$cum.n <- cumsum(logit.quantile.summary$n)
logit.quantile.summary$n.retained<-logit.quantile.summary$n*logit.quantile.summary$retention.percentage
logit.quantile.summary$cum.n.retained<-cumsum(logit.quantile.summary$n.retained)
logit.quantile.summary$cumlift<-(logit.quantile.summary$n.retained/logit.quantile.summary$cum.n)/overall.response
rm(list=ls())
library(visreg)
library(dplyr)
#Set Up ----
setwd("C:/Users/The Law/Downloads/Academic/Semester 2/Customer Analytics/Final Exam")
order <- read.csv("orderquantity.csv")
donation <- read.csv("donation.csv")
#18 bin all customers
donation$frequencydecile <- ntile(donation$frequency, 10)
freq.quantile.summary<-aggregate(donation$donate_11, by = list(donation$frequencydecile), FUN = mean)
#19 logit recency and freq to predict 2011 donations
donation.logisticfit <- glm(donate_11 ~ recency + frequency, data= donation, family = "binomial")
summary(donation.logisticfit)
#20 predictions using model
donation$logit_predict <- predict(donation.logisticfit, type = "response")
overall.response <- mean(donation$logit_predict)
donation$logitdecile <- ntile(donation$logit_predict, 10)
logit.quantile.summary$quantile <- 11 - logit.quantile.summary$quantile
logit.quantile.summary <- aggregate(donation$donate_11, by = list(donation$logitdecile), FUN = mean)
logit.quantile.summary <- aggregate(donation$donate_11, by = list(donation$logitdecile), FUN = mean)
#24 cum lift
colnames(logit.quantile.summary)<-c("quantile","retention.percentage")
logit.quantile.summary$quantile <- 11 - logit.quantile.summary$quantile
logit.quantile.summary<-logist.quantile.summary[order(logit.quantile.summary$quantile),]
logit.quantile.summary<-logit.quantile.summary[order(logit.quantile.summary$quantile),]
logit.quantile.summary$n <- table(donation$logitdecile)
logit.quantile.summary$n <- table(donation$logitdecile)
logit.quantile.summary$cum.n <- cumsum(logit.quantile.summary$n)
logit.quantile.summary$n.retained<-logit.quantile.summary$n*logit.quantile.summary$retention.percentage
logit.quantile.summary$cum.n.retained<-cumsum(logit.quantile.summary$n.retained)
logit.quantile.summary$cumlift<-(logit.quantile.summary$n.retained/logit.quantile.summary$cum.n)/overall.response
logit.quantile.summary$cum.retention.rate <- logit.quantile.summary$cum.n.retained/logit.quantile.summary$cum.n
logit.quantile.summary$cumlift<-(logit.quantile.summary$cum.retention.rate)/overall.response
#26 logit with interaction
donation.logisticint <- glm(donate_11 ~ recency * frequency, data= donation, family = "binomial")
summary(donation.logisticint)
visreg(donation.logisticint, "recnecy", by = "frequency", data = donation, overlay = TRUE)
visreg(donation.logisticint, "recency", by = "frequency", data = donation, overlay = TRUE)
visreg(donation.logisticint, "frequency", by = "recency", data = donation, overlay = TRUE)
visreg(donation.logisticint, "frequency", by = "recency", data = donation, overlay = TRUE, scale = "response")
#27 cross validation
set.seed(123)
cvFit(donation.logisticfit, y = donation$donate_11, data=donation,K=5, R=5)
#27 cross validation
set.seed(123)
cvFit(donation.logisticfit, y = donation$donate_11, data=donation,K=5, R=5)
cvFit(donation.logisticint, y = donation$donate_11, data=donation,K=5, R=5)
setwd("C:/Users/The Law/Downloads/Academic/Semester 2/Customer Analytics/Week12 Over-Fitting")
dodgers<-read.csv("dodgers.csv")
#Linear model of temperature
linear.model <- lm(attend ~ temp, data=dodgers)
summary(linear.model)
visreg(linear.model,"temp")
#Quadratic model of temperature
quadratic.model <- lm(attend ~ temp + I(temp^2), data=dodgers)
summary(quadratic.model)
visreg(quadratic.model,"temp")
#Fifth-order model of temperature
fifthorder.model <- lm(attend ~ temp + I(temp^2)+ I(temp^3)+ I(temp^4) +I(temp^5), data=dodgers)
visreg(fifthorder.model,"temp")
summary(fifthorder.model)
set.seed(1234)
cvFit(linear.model,y=dodgers$attend, data=dodgers, K=5, R=50)
cvFit(quadratic.model,y=dodgers$attend, data=dodgers, K=5, R=50)
cvFit(fifthorder.model,y=dodgers$attend, data=dodgers, K=5, R=50)
rm(list=ls())
library(visreg)
library(dplyr)
#Set Up ----
setwd("C:/Users/The Law/Downloads/Academic/Semester 2/Customer Analytics/Final Exam")
order <- read.csv("orderquantity.csv")
donation <- read.csv("donation.csv")
ordqty <-lm(Order_Quantity ~ Loyalty , data=order)
summary(ordqty)
#9 Same regression but with income
ordqty2 <-lm(Order_Quantity ~ Loyalty + Income, data=order)
summary(ordqty2)
#11 Same regression but with income as categorical
order$catInc <- factor(order$Income)
ordqty3 <-lm(Order_Quantity ~ Loyalty + catInc, data=order)
summary(ordqty3)
#subs missing values with 0
order$Income <- ifelse(is.na(order$Income), 0, order$Income)
#dummy column if value is 0, then 1
order$DummyIncome <- ifelse(order$Income == 0, 1, 0)
ordqty4 <-lm(Order_Quantity ~ Loyalty + Income + DummyIncome, data=order)
summary(ordqty4)
#16 regression with interaction
ordqty5 <-lm(Order_Quantity ~ Loyalty * Income, data=order)
summary(ordqty5)
visreg(ordqty5, "Income", by = "Loyalty", data = order, overlay = TRUE)
#18 bin all customers
donation$frequencydecile <- ntile(donation$frequency, 10)
freq.quantile.summary<-aggregate(donation$donate_11, by = list(donation$frequencydecile), FUN = mean)
View(freq.quantile.summary)
#19 logit recency and freq to predict 2011 donations
donation.logisticfit <- glm(donate_11 ~ recency + frequency, data= donation, family = "binomial")
summary(donation.logisticfit)
#20 predictions using model
donation$logit_predict <- predict(donation.logisticfit, type = "response")
overall.response <- mean(donation$logit_predict)
donation$logitdecile <- ntile(donation$logit_predict, 10)
logit.quantile.summary <- aggregate(donation$donate_11, by = list(donation$logitdecile), FUN = mean)
View(logit.quantile.summary)
#24 cum lift
colnames(logit.quantile.summary)<-c("quantile","retention.percentage")
logit.quantile.summary$quantile <- 11 - logit.quantile.summary$quantile
logit.quantile.summary<-logit.quantile.summary[order(logit.quantile.summary$quantile),]
logit.quantile.summary$n <- table(donation$logitdecile)
logit.quantile.summary$cum.n <- cumsum(logit.quantile.summary$n)
logit.quantile.summary$n.retained<-logit.quantile.summary$n*logit.quantile.summary$retention.percentage
logit.quantile.summary$cum.n.retained<-cumsum(logit.quantile.summary$n.retained)
logit.quantile.summary$cum.retention.rate <- logit.quantile.summary$cum.n.retained/logit.quantile.summary$cum.n
logit.quantile.summary$cumlift<-(logit.quantile.summary$cum.retention.rate)/overall.response
#26 logit with interaction
donation.logisticint <- glm(donate_11 ~ recency * frequency, data= donation, family = "binomial")
summary(donation.logisticint)
visreg(donation.logisticint, "frequency", by = "recency", data = donation, overlay = TRUE, scale = "response")
