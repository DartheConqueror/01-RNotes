} Else if (NumGrades[i] >= 80){
print ("B")
} Else if (NumGrades[i] > = 70){
print ("C")
} Else if (NumGrades[i] > = 60){
print ("D")
} Else {
Print ("F")
}
for (i in NumGrades[i]) {
for (i in NumGrades[i]) {
if (NumGrades[i] >= 90) {
Print ("A")
} Else if (NumGrades[i] >= 80){
print ("B")
} Else if (NumGrades[i] > = 70){
print ("C")
} Else if (NumGrades[i] > = 60){
print ("D")
} Else {
Print ("F")
}
}
for (i in NumGrades[i]) {
if (NumGrades[i] >= 90) {
Print ("A")
} else if (NumGrades[i] >= 80){
print ("B")
} else if (NumGrades[i] > == 70){
print ("C")
} else if (NumGrades[i] > == 60){
print ("D")
} else {
Print ("F")
}
}
for (i in NumGrades[i]) {
if (NumGrades[i] >= 90) {
Print ("A")
} else if (NumGrades[i] >= 80){
print ("B")
} else if (NumGrades[i] > = 70){
print ("C")
} else if (NumGrades[i] > = 60){
print ("D")
} else {
Print ("F")
}
}
Print ("A")
if (NumGrades[i] >= 90) {
"A"
} else if (NumGrades[i] >= 80){
print ("B")
} else if (NumGrades[i] > = 70){
print ("C")
} else if (NumGrades[i] > = 60){
print ("D")
} else {
Print ("F")
}
for (i in NumGrades[i]) {
if (NumGrades[i] >= 90) {
"A"
} else if (NumGrades[i] >= 80){
"B"
} else if (NumGrades[i] > = 70){
"C"
} else if (NumGrades[i] > = 60){
"D"
} else {
"F"
}
}
for (i in NumGrades[i]) {
if (NumGrades[i] >= 90) {
c("A")
} else if (NumGrades[i] >= 80){
c("B")
} else if (NumGrades[i] > = 70){
c("C")
} else if (NumGrades[i] > = 60){
c("D")
} else {
c("F")
}
}
for (i in NumGrades[i]) {
if (NumGrades[i] >= 90) {
c("A")
}  else if (NumGrades[i] >= 80){
c("B")
}  else if (NumGrades[i] > = 70){
c("C")
}  else if (NumGrades[i] > = 60){
c("D")
}  else {
c("F")
}
}
if (NumGrades[i] >= 90) {
c("A")
}  else if (NumGrades[i] >= 80){
c("B")
}  else if (NumGrades[i] >= 70){
c("C")
}  else if (NumGrades[i] >= 60){
c("D")
}  else {
c("F")
}
if ((NumGrades[i] >= 90) == TRUE) {
c("A")
}  else if (NumGrades[i] >= 80){
c("B")
}  else if (NumGrades[i] >= 70){
c("C")
}  else if (NumGrades[i] >= 60){
c("D")
}  else {
c("F")
}
if ((NumGrades[i] >= 90) == TRUE) {
c("A")
}  else if ((NumGrades[i] >= 80) == TRUE){
c("B")
}  else if ((NumGrades[i] >= 70) == TRUE){
c("C")
}  else if ((NumGrades[i] >= 60) == TRUE){
c("D")
}  else {
c("F")
}
for (i in NumGrades[i]) {
if ((NumGrades[i] >= 90) == TRUE) {
c("A")
}  else if ((NumGrades[i] >= 80) == TRUE){
c("B")
}  else if ((NumGrades[i] >= 70) == TRUE){
c("C")
}  else if ((NumGrades[i] >= 60) == TRUE){
c("D")
}  else {
c("F")
}
}
for (i in NumGrades[i]) {
if (NumGrades[i] >= 90) {
c("A")
}  else if (NumGrades[i] >= 80){
c("B")
}  else if (NumGrades[i] >= 70){
c("C")
}  else if (NumGrades[i] >= 60){
c("D")
}  else {
c("F")
}
}
for (i in NumGrades[i]) {
if (NumGrades[i] >= 90) {
c("A")
}  else if (NumGrades[i] >= 80){
c("B")
}  else if (NumGrades[i] >= 70){
c("C")
}  else if (NumGrades[i] >= 60){
c("D")
}  else {
c("F")
}
}
for (i in NumGrades[i]) {
if (NumGrades[i] >= 90) {
c("A")
}  else if (NumGrades[i] >= 80){
c("B")
}  else if (NumGrades[i] >= 70){
c("C")
}  else if (NumGrades[i] >= 60){
c("D")
}  else {
c("F")
}
}
NumGrades <- sample(100, 100)
for (i in NumGrades[i]) {
if (NumGrades[i] >= 90) {
c("A")
}  else if (NumGrades[i] >= 80){
c("B")
}  else if (NumGrades[i] >= 70){
c("C")
}  else if (NumGrades[i] >= 60){
c("D")
}  else {
c("F")
}
}
"A"
for (i in NumGrades[i]) {
if (NumGrades[i] >= 90) {
"A"
}  else if (NumGrades[i] >= 80){
c("B")
}  else if (NumGrades[i] >= 70){
c("C")
}  else if (NumGrades[i] >= 60){
c("D")
}  else {
c("F")
}
}
"F"
for (i in NumGrades[i]) {
if (NumGrades[i] >= 90) {
"A"
}  else if (NumGrades[i] >= 80){
"B"
}  else if (NumGrades[i] >= 70){
"C"
}  else if (NumGrades[i] >= 60){
"D"
}  else {
"F"
}
}
if (NumGrades[1] >= 90) {
"A"
}
if (NumGrades[1] >= 90) {
"A"
} else if (NumGrades[9] >= 80){
"B"
}
if (NumGrades[9] >= 90) {
"A"
} else if (NumGrades[9] >= 80){
"B"
}
if (NumGrades[3] >= 90) {
"A"
} else if (NumGrades[3] >= 80){
"B"
} else if (NumGrades[3] >= 70) {
"C"
}
if (NumGrades[6] >= 90) {
"A"
} else if (NumGrades[6] >= 80){
"B"
} else if (NumGrades[6] >= 70) {
"C"
} else if (NumGrades[6] >= 60) {
"D"
}
if (NumGrades[5] >= 90) {
"A"
} else if (NumGrades[5] >= 80){
"B"
} else if (NumGrades[5] >= 70) {
"C"
} else if (NumGrades[5] >= 60) {
"D"
} else{
"F"
}
for (i in NumGrades[i]) {
if (NumGrades[i] >= 90) {
"A"
} else if (NumGrades[i] >= 80){
"B"
} else if (NumGrades[i] >= 70) {
"C"
} else if (NumGrades[i] >= 60) {
"D"
} else{
"F"
}
}
i
for (i in NumGrades[i + 1]) {
if (NumGrades[i] >= 90) {
"A"
} else if (NumGrades[i] >= 80){
"B"
} else if (NumGrades[i] >= 70) {
"C"
} else if (NumGrades[i] >= 60) {
"D"
} else{
"F"
}
}
for (i in NumGrades[i] +1 ) {
if (NumGrades[i] >= 90) {
"A"
} else if (NumGrades[i] >= 80){
"B"
} else if (NumGrades[i] >= 70) {
"C"
} else if (NumGrades[i] >= 60) {
"D"
} else{
"F"
}
}
for (i in NumGrades[i]) {
if (NumGrades[i] >= 90) {
"A"
} else if (NumGrades[i] >= 80){
"B"
} else if (NumGrades[i] >= 70) {
"C"
} else if (NumGrades[i] >= 60) {
"D"
} else{
"F"
}
}
LetterGrades<- 0
if (NumGrades[i] >= 90) {
LetterGrades <- "A"
} else if (NumGrades[i] >= 80){
"B"
} else if (NumGrades[i] >= 70) {
"C"
} else if (NumGrades[i] >= 60) {
"D"
} else{
"F"
}
for (i in NumGrades[i]) {
if (NumGrades[i] >= 90) {
LetterGrades <- "A"
} else if (NumGrades[i] >= 80){
LetterGrades <- "B"
} else if (NumGrades[i] >= 70) {
LetterGrades <- "C"
} else if (NumGrades[i] >= 60) {
LetterGrades <- "D"
} else{
LetterGrades <- "F"
}
}
for (i in NumGrades[i]) {
if (NumGrades[i] >= 90) {
LetterGrades[i] <- "A"
} else if (NumGrades[i] >= 80){
LetterGrades[i] <- "B"
} else if (NumGrades[i] >= 70) {
LetterGrades[i] <- "C"
} else if (NumGrades[i] >= 60) {
LetterGrades[i] <- "D"
} else{
LetterGrades[i] <- "F"
}
}
if (NumGrades[i] >= 90) {
LetterGrades[i] <- "A"
} else if (NumGrades[i] >= 80){
LetterGrades[i] <- "B"
} else if (NumGrades[i] >= 70) {
LetterGrades[i] <- "C"
} else if (NumGrades[i] >= 60) {
LetterGrades[i] <- "D"
} else{
LetterGrades[i] <- "F"
}
if (NumGrades[i] >= 90) {
LetterGrades[i] <- "A"
} else if (NumGrades[i] >= 80){
LetterGrades[i] <- "B"
} else if (NumGrades[i] >= 70) {
LetterGrades[i] <- "C"
} else if (NumGrades[i] >= 60) {
LetterGrades[i] <- "D"
} else{
LetterGrades[i] <- "F"
}
for (i in NumGrades[i]) {
if (NumGrades[i] >= 90) {
LetterGrades[i] <- "A"
} else if (NumGrades[i] >= 80){
LetterGrades[i] <- "B"
} else if (NumGrades[i] >= 70) {
LetterGrades[i] <- "C"
} else if (NumGrades[i] >= 60) {
LetterGrades[i] <- "D"
} else{
LetterGrades[i] <- "F"
}}
#A
seq(from = 6, to = 72, by = 11)
seq(from = 6, by = 11, length.out = 7)
seq(from = 6, to = 72, length.out = 7)
seq(to = 72, by = 11, length.out = 7)
#B
append(rep(seq(3, 7, 2), 2), 3)
#C
a <- seq(from = 52, to = 284, by = 2)
mean(a)
#D
b <- seq(1,100,1)
c <-replace(b, rep(seq(from = 7, to = 100, by = 7)), 13) #replaces every 7th value with 13
c <- replace(c, 50, 0)
c<- replace(c, 60, 0)
mean(c)
median(c)
#E
myvector <- sample(b, size =100, replace = TRUE)
greaterthan50 <- myvector[myvector > 50]
mean(myvector)
mean(greaterthan50)
myvecotr <- sample(100, 100) #creates a a vector of rendom variables fromm 1 to 100
min <- myvecotr[1] #this creates a variable of the first element in the vector
for ( i in myvecotr[-1] + 1) {
if (myvecotr[i] < min) #if the element is less than the min then insert it into the min variable
min <- myvecotr[i] #Although theere is an error message, I recieve the right answer
}
min # print min variable
2/0
print(min(myvecotr))
NumGrades <- sample(100, 100)
for (i in NumGrades) {
if (NumGrades[i] >= 90) {
NumGrades[i] <- "A"
} else if (NumGrades[i] >= 80){
NumGrades[i] <- "B"
} else if (NumGrades[i] >= 70){
NumGrades[i] <- "C"
} else if (NumGrades[i] >= 60){
NumGrades[i] <- "D"
} else{
NumGrades[i] <- "F"
}
}
NumGrades
rm(list-ls())
rm(list=ls())
data("diamonds")
#A
diamonds[20:30,]
library(ggplot2)
data("diamonds")
#A
diamonds[20:30,]
#B
diamonds$depth
diamonds[,"depth"]
diamonds[, c("depth")]
#C
subset(diamonds, price > 18800)
#D
mean(subset(diamonds[diamonds$carat < 1,])$price)
#C
subset(diamonds, price > 18800)
#D
mean(subset(diamonds[diamonds$carat < 1,])$price)
#Takes a subset of each cut and samples out 100 values
cut.Ideal <- sample(subset(diamonds[diamonds$cut == "Ideal", ])$price, 100, replace = FALSE)
cut.Fair <- sample(subset(diamonds[diamonds$cut == "Fair", ])$price, 100, replace = FALSE)
cut.Good <- sample(subset(diamonds[diamonds$cut == "Good", ])$price, 100, replace = FALSE)
cut.VeryGood <- sample(subset(diamonds[diamonds$cut == "Very Good", ])$price, 100, replace = FALSE)
cut.Premium <- sample(subset(diamonds[diamonds$cut == "Premium", ])$price, 100, replace = FALSE)
#places each vector of each cut into a dataframe
cut.data <- data.frame(cut.Ideal, cut.Fair, cut.Good, cut.VeryGood, cut.Premium, stringsAsFactors = FALSE)
#Sumamry Statistics for Each Cut
mean(cut.data$cut.Ideal)
median(cut.data$cut.Ideal)
sd(cut.data$cut.Ideal)
median(cut.data$cut.Fair)
sd(cut.data$cut.Fair)
mean(cut.data$cut.Good)
sd(cut.data$cut.Good)
mean(cut.data$cut.VeryGood)
median(cut.data$cut.VeryGood)
median(cut.data$cut.Good)
mean(cut.data$cut.Fair)
sd(cut.data$cut.VeryGood)
mean(cut.data$cut.Premium)
median(cut.data$cut.Premium)
sd(cut.data$cut.Premium)
#Histogram of Prices at Each Cut
ggplot(diamonds, aes(x = cut, y = price)) +
geom_boxplot()
setwd("C:/Users/The Law/Downloads/Academic/Semester 2/Customer Analytics/Cases/Maru Batting")
maru.data<-read.csv("maru data students final.csv")
View(maru.data)
maru.data$total.cost.per.hr<-maru.data$instructor.labor.cost.per.hr* maru.data$instructors.needed + maru.data$worker.labor.cost.per.hr* maru.data$workers.needed
maru.data$margin.hr<-maru.data$price.per.hr-maru.data$total.cost.per.hr
maru.data$annual.margin<-maru.data$margin.hr*maru.data$annual.hours
maru.data$acquisition.cost<-maru.data$contact.cost/maru.data$response.rate
#Create a new column with CLV assuming numbers from case
maru.data$clv <- (maru.data$annual.margin* ((1+maru.data$interest.rate) / (1 + maru.data$interest.rate - maru.data$retention.rate))) - maru.data$acquisition.cost
#creates scenario values
ac <- seq(from = 40000, to = 60000, by = 5000)
am <- seq(from = 20000, to = 40000, by = 5000)
rr <- seq(from = 0.30, to = 0.90, by = 0.12)
values <- expand.grid(ac=ac,am=am,rr=rr)
View(values)
#adds constant interest rate column
values$ir <- 0.10
#computes CLV for all scenarios
values$clv <- values$am * ( (1+values$ir) / (1 + values$ir - values$rr)) - values$ac
#some descriptives
negativeclvpercent = sum(values$clv < 0)/ length(values$clv)
worsethanlittleleaguerspercent=sum(values$clv < maru.data$clv[1])/length(values$clv)
#visualization using scatter plot
scatter.smooth(x=values$ac, y=values$clv)
scatter.smooth(x=values$am, y=values$clv)
scatter.smooth(x=values$rr, y=values$clv)
