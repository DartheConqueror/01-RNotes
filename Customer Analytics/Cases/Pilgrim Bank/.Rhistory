# append averages into dataframe
df$targetPlaylistAvgCons <- averagesTemp
# descriptive stats ------------------------------------------
# K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.
# KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK
# participant's party ("party")
# participant's ideology ("ideology")
# composite ("subjLib")
# misc exploratory variables
# manip check on lib / conserv of other student ("othStuChars")
# should factor poliViews for own listening
# should factor poliViews for others listening
# impact of politics on self hearing the music
# impact of politics on others hearing the music
# good or bad to hear a diversity of political views in music
# age, income, gender, employment status
# charts -----------------------------------------------------
# K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.
# KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK
# misc exploratory variables
# song enjoyment
# perceived other's song enjoyment
# percevied poliThemes in music
# heard of artist before
#
# models / analyses ------------------------------------------
# K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.
# KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK
# create a "match" variable for whether their partisanship matches their target's
df$match <- ifelse(df$subjCons > 0 & df$targetCons > 0 | df$subjCons < 0 & df$targetCons < 0, .5, -.5)
# match model
summary(lm(targetPlaylistAvgCons ~ ownPlaylistAvgCons*match, data = df))
# visualize the collapsing
# generate correlations; firstWord = self, secondWord = target
libLib <-  cor(df[df$subjCons < 0  & df$targetCons < 0, c('ownPlaylistAvgCons', 'targetPlaylistAvgCons')])[2]
libCons <- cor(df[df$subjCons < 0  & df$targetCons > 0, c('ownPlaylistAvgCons', 'targetPlaylistAvgCons')])[2]
indLib <-  cor(df[df$subjCons == 0 & df$targetCons < 0, c('ownPlaylistAvgCons', 'targetPlaylistAvgCons')])[2]
indCons <- cor(df[df$subjCons == 0 & df$targetCons > 0, c('ownPlaylistAvgCons', 'targetPlaylistAvgCons')])[2]
consLib  <- cor(df[df$subjCons > 0 & df$targetCons < 0, c('ownPlaylistAvgCons', 'targetPlaylistAvgCons')])[2]
consCons <- cor(df[df$subjCons > 0 & df$targetCons > 0, c('ownPlaylistAvgCons', 'targetPlaylistAvgCons')])[2]
# create a table of them
correlations <- matrix(
data = c(libLib, indLib, consLib,
libCons, indCons, consCons),
nrow = 2, byrow = T,
dimnames = list(
c('Target Liberal', 'Target Conservative'),
c('Self Liberal', 'Self Independent', 'Self Conservative')
))
# chart them
barplot(correlations, beside = T, legend.text = T, args.legend = list(x = "bottomright"))
# create a "match" variable for whether their partisanship matches their target's
df$match <- ifelse(df$subjCons > 0 & df$targetCons > 0 | df$subjCons < 0 & df$targetCons < 0, .5, -.5)
#Analysis
#Hyptothesis 1
summary(lm(df$ownPlaylistAvgCons ~ df$subjCons +  df$selfFirst))
#Hypothesis 2
summary(lm(df$targetPlaylistAvgCons ~  df$targetCons + df$selfFirst))
#Hypothesis 3
summary(lm(targetPlaylistAvgCons ~ ownPlaylistAvgCons*match, data = df))
visreg((lm(ownPlaylistAvgCons ~ subjCons, data = df)), "subjCons")
library(isreg)
library(visreg)
visreg((lm(ownPlaylistAvgCons ~ subjCons, data = df)), "subjCons")
visreg((lm(targetPlaylistAvgCons ~ targetCons, data = df)), "targetCons")
#Hypothesis 3
fit <- summary(lm(targetPlaylistAvgCons ~ ownPlaylistAvgCons*match, data = df))
visreg(fit, "ownPLaylistAvgCons", "match", ylab= targetPlaylistAvgCons_
visreg(fit, "ownPLaylistAvgCons", "match", ylab= targetPlaylistAvgCons)
visreg(fit, "ownPLaylistAvgCons", "match", ylab= "targetPlaylistAvgCons")
visreg(fit, "ownPlaylistAvgCons", "match", ylab= "targetPlaylistAvgCons")
fit <- (lm(targetPlaylistAvgCons ~ ownPlaylistAvgCons*match, data = df))
visreg(fit, "ownPlaylistAvgCons", "match", ylab= "targetPlaylistAvgCons")
visreg(fit, "ownPlaylistAvgCons", ylab= "targetPlaylistAvgCons")
, "match"
visreg(fit, "ownPlaylistAvgCons", "match", ylab= "targetPlaylistAvgCons")
#Hypothesis 2
summary(lm(df$targetPlaylistAvgCons ~  df$targetCons + df$selfFirst))
# chart them
barplot(correlations, beside = T, legend.text = T, args.legend = list(x = "bottomright"))
# set up -----------------------------------------------------
# K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.
# KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK
rm(list=ls())
if(!is.null(dev.list())) dev.off()
cat("\014")
library(ggplot2)
library(visreg)
df <- read.csv("C:/Users/The Law/Downloads/Academic/Thesis/Data/06 - PartOverProd Songs LeafLab v1_March 22, 2018_17.03.csv")
# create codebook from original data
codeBook <- t(df[1,])
# write out and read in to auto-class variables
df <- df[-c(1, 2),]  # remove unnecessary lines
# write out df
write.csv(df, "C:/Users/The Law/Downloads/Academic/Thesis/Data/06 - PartOverProd Songs LeafLab v1_March 22, 2018_17.03.csv")
# read in df
df <- read.csv("C:/Users/The Law/Downloads/Academic/Thesis/Data/06 - PartOverProd Songs LeafLab v1_March 22, 2018_17.03.csv")
# remove if not finished
df <- subset(df, df$Finished == 1)
# drop people who don't have the right numbers
# artists
df <- subset(df, df$artistProfNum %in% c('1391', '3729'))
# target students
df <- subset(df, df$othStuProf %in% c('1832', '2461')) # 1832 = dem, 2461 = rep
# create composite variable of party and ideology (subjCons)
df$subjCons <- rowMeans(df[,c('party', 'ideology')])
# create target student ideology variable (targetLib)
df$targetCons <- ifelse(df$othStuProf == '2461', .5,
ifelse(df$othStuProf == '1832', -.5, NA))
# create playlist DVs | higher is more liberal ---------------
# K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.
# KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK
# vector of conservative songs for artistProfNum 1391
setOneConsSongs <- c(1, 3, 4, 6, 10)
# setOneLibSongs <- c(2, 5, 7, 8, 9)
# vector of conservative songs for artistProfNum 3729
setTwoConsSongs <- c(2, 5, 7, 8, 9)
# setTwoLibSongs <- c(1, 3, 4, 6, 10)
# own playlist avg
# create numeric variable
df$selfPlaylist <- as.character(df$selfPlaylist_0_GROUP)
# create a vector to fill
averagesTemp <- rep(NA, nrow(df))
for (i in 1:nrow(df)) {
# if they saw this set...
if(df$artistProfNum[i] == '1391') {
# create a list of the songs in their playlist
vecTemp <- unlist(strsplit(df$selfPlaylist[i], ','))
# store average of how many of those are in the liberal songs thing
avg <- sum(vecTemp %in% setOneConsSongs) / length(vecTemp)
averagesTemp[i] <- avg
}
# if they saw this set...
if(df$artistProfNum[i] == '3729') {
# create a list of the songs in their playlist
vecTemp <- unlist(strsplit(df$selfPlaylist[i], ','))
# store average of how many of those are in the liberal songs thing
avg <- sum(vecTemp %in% setTwoConsSongs) / length(vecTemp)
averagesTemp[i] <- avg
}
}
# append averages into dataframe
df$ownPlaylistAvgCons <- averagesTemp
# target student's playlist
# create numeric variable
df$targetPlaylist <- as.character(df$othPlaylist_0_GROUP)
# create a vector to fill
averagesTemp <- rep(NA, nrow(df))
for (i in 1:nrow(df)) {
if(df$artistProfNum[i] == '1391') {
# create a list of the songs in their playlist
vecTemp <- unlist(strsplit(df$targetPlaylist[i], ','))
# store average of how many of those are in the liberal songs thing
avg <- sum(vecTemp %in% setOneConsSongs) / length(vecTemp)
averagesTemp[i] <- avg
}
if(df$artistProfNum[i] == '3729') {
# create a list of the songs in their playlist
vecTemp <- unlist(strsplit(df$targetPlaylist[i], ','))
# store average of how many of those are in the liberal songs thing
avg <- sum(vecTemp %in% setTwoConsSongs) / length(vecTemp)
averagesTemp[i] <- avg
}
}
# append averages into dataframe
df$targetPlaylistAvgCons <- averagesTemp
# descriptive stats ------------------------------------------
# K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.
# KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK
# participant's party ("party")
# participant's ideology ("ideology")
# composite ("subjLib")
# misc exploratory variables
# manip check on lib / conserv of other student ("othStuChars")
# should factor poliViews for own listening
# should factor poliViews for others listening
# impact of politics on self hearing the music
# impact of politics on others hearing the music
# good or bad to hear a diversity of political views in music
# age, income, gender, employment status
# charts -----------------------------------------------------
# K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.
# KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK
# misc exploratory variables
# song enjoyment
# perceived other's song enjoyment
# percevied poliThemes in music
# heard of artist before
#
# models / analyses ------------------------------------------
# K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.
# KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK
# create a "match" variable for whether their partisanship matches their target's
df$match <- ifelse(df$subjCons > 0 & df$targetCons > 0 | df$subjCons < 0 & df$targetCons < 0, .5, -.5)
# match model
summary(lm(targetPlaylistAvgCons ~ ownPlaylistAvgCons*match, data = df))
# visualize the collapsing
# generate correlations; firstWord = self, secondWord = target
libLib <-  cor(df[df$subjCons < 0  & df$targetCons < 0, c('ownPlaylistAvgCons', 'targetPlaylistAvgCons')])[2]
libCons <- cor(df[df$subjCons < 0  & df$targetCons > 0, c('ownPlaylistAvgCons', 'targetPlaylistAvgCons')])[2]
indLib <-  cor(df[df$subjCons == 0 & df$targetCons < 0, c('ownPlaylistAvgCons', 'targetPlaylistAvgCons')])[2]
indCons <- cor(df[df$subjCons == 0 & df$targetCons > 0, c('ownPlaylistAvgCons', 'targetPlaylistAvgCons')])[2]
consLib  <- cor(df[df$subjCons > 0 & df$targetCons < 0, c('ownPlaylistAvgCons', 'targetPlaylistAvgCons')])[2]
consCons <- cor(df[df$subjCons > 0 & df$targetCons > 0, c('ownPlaylistAvgCons', 'targetPlaylistAvgCons')])[2]
# create a table of them
correlations <- matrix(
data = c(libLib, indLib, consLib,
libCons, indCons, consCons),
nrow = 2, byrow = T,
dimnames = list(
c('Target Liberal', 'Target Conservative'),
c('Self Liberal', 'Self Independent', 'Self Conservative')
))
# chart them
barplot(correlations, beside = T, legend.text = T, args.legend = list(x = "bottomright"))
visreg((lm(ownPlaylistAvgCons ~ subjCons, data = df)), "subjCons")
visreg((lm(targetPlaylistAvgCons ~ targetCons, data = df)), "targetCons")
ggplot(df, aes(f0)) +
geom_bar(data = df$ownPlaylistAvgCons, fill = "red", alpha = 0.2) +
geom_bar(data = df$targetPlaylistAvgCons, fill = "blue", alpha = 0.2)
ggplot(df, aes(f0)) +
geom_bar(data = df$ownPlaylistAvgCons, fill = "red", alpha = 0.2) +
geom_bar(data = df$targetPlaylistAvgCons, fill = "blue", alpha = 0.2)
# chart them
barplot(correlations, beside = T, legend.text = T, args.legend = list(x = "bottomright"))
library(ggplot)
library(ggplot2)
library(ggplot2)
ggplot(df, aes(f0)) +
geom_bar(data = df$ownPlaylistAvgCons, fill = "red", alpha = 0.2) +
geom_bar(data = df$targetPlaylistAvgCons, fill = "blue", alpha = 0.2)
ggplot(df, aes(f0)) +
geom_chart(data = df$ownPlaylistAvgCons, fill = "red", alpha = 0.2) +
geom_chart(data = df$targetPlaylistAvgCons, fill = "blue", alpha = 0.2)
ggplot(df,aes(f0)) +
geom_col(data = df$ownPlaylistAvgCons, fill = "red", alpha = 0.2) +
geom_col(data = df$targetPlaylistAvgCons, fill = "blue", alpha = 0.2)
# set up -----------------------------------------------------
# K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.
# KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK
rm(list=ls())
if(!is.null(dev.list())) dev.off()
cat("\014")
library(ggplot2)
library(visreg)
df <- read.csv("C:/Users/The Law/Downloads/Academic/Thesis/Data/06 - PartOverProd Songs LeafLab v1_April 3, 2018_11.24.csv")
# create codebook from original data
codeBook <- t(df[1,])
# write out and read in to auto-class variables
df <- df[-c(1, 2),]  # remove unnecessary lines
# write out df
write.csv(df, "C:/Users/The Law/Downloads/Academic/Thesis/Data/06 - PartOverProd Songs LeafLab v1_April 3, 2018_11.24AUTOCLASS.csv")
# read in df
df <- read.csv("C:/Users/The Law/Downloads/Academic/Thesis/Data/06 - PartOverProd Songs LeafLab v1_April 3, 2018_11.24AUTOCLASS.csv")
# remove if not finished
df <- subset(df, df$Finished == 1)
# drop people who don't have the right numbers
# artists
df <- subset(df, df$artistProfNum %in% c('1391', '3729'))
# target students
df <- subset(df, df$othStuProf %in% c('1832', '2461')) # 1832 = dem, 2461 = rep
# create composite variable of party and ideology (subjCons)
df$subjCons <- rowMeans(df[,c('party', 'ideology')])
# create target student ideology variable (targetLib)
df$targetCons <- ifelse(df$othStuProf == '2461', .5,
ifelse(df$othStuProf == '1832', -.5, NA))
# create playlist DVs | higher is more liberal ---------------
# K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.
# KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK
# vector of conservative songs for artistProfNum 1391
setOneConsSongs <- c(1, 3, 4, 6, 10)
# setOneLibSongs <- c(2, 5, 7, 8, 9)
# vector of conservative songs for artistProfNum 3729
setTwoConsSongs <- c(2, 5, 7, 8, 9)
# setTwoLibSongs <- c(1, 3, 4, 6, 10)
# own playlist avg
# create numeric variable
df$selfPlaylist <- as.character(df$selfPlaylist_0_GROUP)
# create a vector to fill
averagesTemp <- rep(NA, nrow(df))
for (i in 1:nrow(df)) {
# if they saw this set...
if(df$artistProfNum[i] == '1391') {
# create a list of the songs in their playlist
vecTemp <- unlist(strsplit(df$selfPlaylist[i], ','))
# store average of how many of those are in the liberal songs thing
avg <- sum(vecTemp %in% setOneConsSongs) / length(vecTemp)
averagesTemp[i] <- avg
}
# if they saw this set...
if(df$artistProfNum[i] == '3729') {
# create a list of the songs in their playlist
vecTemp <- unlist(strsplit(df$selfPlaylist[i], ','))
# store average of how many of those are in the liberal songs thing
avg <- sum(vecTemp %in% setTwoConsSongs) / length(vecTemp)
averagesTemp[i] <- avg
}
}
# append averages into dataframe
df$ownPlaylistAvgCons <- averagesTemp
# target student's playlist
# create numeric variable
df$targetPlaylist <- as.character(df$othPlaylist_0_GROUP)
# create a vector to fill
averagesTemp <- rep(NA, nrow(df))
for (i in 1:nrow(df)) {
if(df$artistProfNum[i] == '1391') {
# create a list of the songs in their playlist
vecTemp <- unlist(strsplit(df$targetPlaylist[i], ','))
# store average of how many of those are in the liberal songs thing
avg <- sum(vecTemp %in% setOneConsSongs) / length(vecTemp)
averagesTemp[i] <- avg
}
if(df$artistProfNum[i] == '3729') {
# create a list of the songs in their playlist
vecTemp <- unlist(strsplit(df$targetPlaylist[i], ','))
# store average of how many of those are in the liberal songs thing
avg <- sum(vecTemp %in% setTwoConsSongs) / length(vecTemp)
averagesTemp[i] <- avg
}
}
# append averages into dataframe
df$targetPlaylistAvgCons <- averagesTemp
# descriptive stats ------------------------------------------
# K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.
# KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK
# participant's party ("party")
# participant's ideology ("ideology")
# composite ("subjLib")
# misc exploratory variables
# manip check on lib / conserv of other student ("othStuChars")
# should factor poliViews for own listening
# should factor poliViews for others listening
# impact of politics on self hearing the music
# impact of politics on others hearing the music
# good or bad to hear a diversity of political views in music
# age, income, gender, employment status
# charts -----------------------------------------------------
# K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.
# KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK
# misc exploratory variables
# song enjoyment
# perceived other's song enjoyment
# percevied poliThemes in music
# heard of artist before
#
# models / analyses ------------------------------------------
# K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.
# KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK
# create a "match" variable for whether their partisanship matches their target's
df$match <- ifelse(df$subjCons > 0 & df$targetCons > 0 | df$subjCons < 0 & df$targetCons < 0, .5, -.5)
# match model
summary(lm(targetPlaylistAvgCons ~ ownPlaylistAvgCons*match, data = df))
# visualize the collapsing
# generate correlations; firstWord = self, secondWord = target
libLib <-  cor(df[df$subjCons < 0  & df$targetCons < 0, c('ownPlaylistAvgCons', 'targetPlaylistAvgCons')])[2]
libCons <- cor(df[df$subjCons < 0  & df$targetCons > 0, c('ownPlaylistAvgCons', 'targetPlaylistAvgCons')])[2]
indLib <-  cor(df[df$subjCons == 0 & df$targetCons < 0, c('ownPlaylistAvgCons', 'targetPlaylistAvgCons')])[2]
indCons <- cor(df[df$subjCons == 0 & df$targetCons > 0, c('ownPlaylistAvgCons', 'targetPlaylistAvgCons')])[2]
consLib  <- cor(df[df$subjCons > 0 & df$targetCons < 0, c('ownPlaylistAvgCons', 'targetPlaylistAvgCons')])[2]
consCons <- cor(df[df$subjCons > 0 & df$targetCons > 0, c('ownPlaylistAvgCons', 'targetPlaylistAvgCons')])[2]
# create a table of them
correlations <- matrix(
data = c(libLib, indLib, consLib,
libCons, indCons, consCons),
nrow = 2, byrow = T,
dimnames = list(
c('Target Liberal', 'Target Conservative'),
c('Self Liberal', 'Self Independent', 'Self Conservative')
))
# chart them
barplot(correlations, beside = T, legend.text = T, args.legend = list(x = "bottomright"))
#Dareck's Code ----
#Analysis
#Hyptothesis 1
summary(lm(df$ownPlaylistAvgCons ~ df$subjCons +  df$selfFirst))
visreg((lm(ownPlaylistAvgCons ~ subjCons, data = df)), "subjCons")
#Hypothesis 2
summary(lm(df$targetPlaylistAvgCons ~  df$targetCons + df$selfFirst))
visreg((lm(targetPlaylistAvgCons ~ targetCons, data = df)), "targetCons")
#Hypothesis 3
summary(lm(targetPlaylistAvgCons ~ ownPlaylistAvgCons*match, data = df))
fit <- (lm(targetPlaylistAvgCons ~ ownPlaylistAvgCons*match, data = df))
visreg(fit, "ownPlaylistAvgCons", "match", ylab= "targetPlaylistAvgCons")
visreg(fit, "ownPlaylistAvgCons", "match", ylab= "targetPlaylistAvgCons", overlay = TRUE)
h1 <- visreg((lm(ownPlaylistAvgCons ~ subjCons, data = df)), "subjCons")
h2 <- isreg((lm(targetPlaylistAvgCons ~ targetCons, data = df)), "targetCons")
h2 <- visreg((lm(targetPlaylistAvgCons ~ targetCons, data = df)), "targetCons")
visreg(h1,h2,  Overlay = TRUE)
h <- (h1,h2)
h <- (h1 + h2)
h <- (h1, h2)
visreg((lm(targetPlaylistAvgCons ~ targetCons, data = df)), "targetCons")
h2 <- visreg((lm(targetPlaylistAvgCons ~ targetCons, data = df)), "targetCons")
#Hypothesis 2
summary(lm(df$targetPlaylistAvgCons ~  df$targetCons + df$selfFirst))
visreg((lm(targetPlaylistAvgCons ~ targetCons, data = df)), "targetCons")
#Analysis
#Hyptothesis 1
summary(lm(df$ownPlaylistAvgCons ~ df$subjCons +  df$selfFirst))
visreg((lm(ownPlaylistAvgCons ~ subjCons, data = df)), "subjCons")
visreg(fit, "ownPlaylistAvgCons", "match", ylab= "targetPlaylistAvgCons", overlay = TRUE)
rm(list=ls())
#set working directory
setwd("C:/Users/The Law/Downloads/Academic/Semester 2/Customer Analytics/Cases/CD Now")
#load transaction data and retention data
CDNow.summary.all<-read.csv("CDNow Restructured.csv")
library(dplyr)
library(visreg)
#install.packages("cvTools")
library(cvTools)
CDNow.summary.all$frequencyquantile <- ntile(CDNow.summary.all$Frequency,3)
CDNow.summary.all$monetaryquantile <- ntile(CDNow.summary.all$Monetary,10)
CDNow.summary.all$recencyquantile <- ntile(CDNow.summary.all$recency,10)
monetary.quantile.summary<-aggregate(CDNow.summary.all$retained, by = list(CDNow.summary.all$monetaryquantile), FUN = mean)
View(monetary.quantile.summary)
colnames(monetary.quantile.summary)<-c("quantile","retention.percentage")
monetary.quantile.summary$n<-table(CDNow.summary.all$monetaryquantile)
plot(monetary.quantile.summary$quantile, monetary.quantile.summary$retention.percentage, type="l")
recency.quantile.summary<-aggregate(CDNow.summary.all$retained, by = list(CDNow.summary.all$recencyquantile), FUN = mean)
View(recency.quantile.summary)
View(recency.quantile.summary)
colnames(recency.quantile.summary)<-c("quantile","retention.percentage")
recency.quantile.summary$n<-table(CDNow.summary.all$recencyquantile)
plot(recency.quantile.summary$quantile, recency.quantile.summary$retention.percentage, type="l")
overall.responserate<-mean(CDNow.summary.all$retained)
monetary.quantile.summary<-monetary.quantile.summary[order(-monetary.quantile.summary$quantile),]
monetary.quantile.summary$cum.n<-cumsum(monetary.quantile.summary$n)
monetary.quantile.summary$n.retained<-monetary.quantile.summary$n*monetary.quantile.summary$retention.percentage
monetary.quantile.summary$cum.n.retained<-cumsum(monetary.quantile.summary$n.retained)
monetary.quantile.summary$cumlift<-(monetary.quantile.summary$cum.n.retained/monetary.quantile.summary$cum.n)/overall.responserate
plot(-monetary.quantile.summary$quantile, monetary.quantile.summary$cumlift, type="l", )
plot(monetary.quantile.summary$quantile, monetary.quantile.summary$cumlift, type="l", lwd=5, xlab="monetary quantile", ylab="cumulative lift",ylim=c(1,3), xlim=rev(range(monetary.quantile.summary$quantile)))
abline(1,0, col="red", lwd=5)
recency.quantile.summary$cum.n<-cumsum(recency.quantile.summary$n)
recency.quantile.summary$n.retained<-recency.quantile.summary$n*recency.quantile.summary$retention.percentage
recency.quantile.summary$cum.n.retained<-cumsum(recency.quantile.summary$n.retained)
recency.quantile.summary$cumlift<-(recency.quantile.summary$cum.n.retained/recency.quantile.summary$cum.n)/overall.responserate
plot(recency.quantile.summary$quantile, recency.quantile.summary$cumlift, type="l",lwd=5, xlab="recency quantile", ylab="cumulative lift",ylim=c(1,3) )
abline(1,0, col="red", lwd=5)
#Linear regression
CDNow.linearfit <-lm(retained ~ recency + Frequency + Monetary, data=CDNow.summary.all)
summary(CDNow.linearfit)
CDNow.summary.all$linearfit <- predict(CDNow.linearfit, type="response")
View(CDNow.linearfit)
View(CDNow.summary.all)
hist(CDNow.summary.all$linearfit)
plot(CDNow.summary.all$Monetary,CDNow.summary.all$linearfit)
plot(CDNow.summary.all$Frequency,CDNow.summary.all$linearfit)
plot(CDNow.summary.all$recency,CDNow.summary.all$linearfit)
CDNow.logisticfit <- glm(retained ~ recency + Frequency + Monetary, data=CDNow.summary.all, family = "binomial")
summary(CDNow.logisticfit)
CDNow.summary.all$logisticfit <- predict(CDNow.logisticfit,type="response")
hist(CDNow.summary.all$logisticfit)
CDNow.summary.all$logisticquantile <- ntile(CDNow.summary.all$logisticfit,10)
logistic.quantile.summary<-aggregate(CDNow.summary.all$retained, by = list(CDNow.summary.all$logisticquantile), FUN = mean)
colnames(logistic.quantile.summary)<-c("quantile","retention.percentage")
logistic.quantile.summary$n<-table(CDNow.summary.all$logisticquantile)
plot(logistic.quantile.summary$quantile, logistic.quantile.summary$retention.percentage, type="l")
logistic.quantile.summary<-logistic.quantile.summary[order(-logistic.quantile.summary$quantile),]
logistic.quantile.summary$cum.n<-cumsum(logistic.quantile.summary$n)
logistic.quantile.summary$n.retained<-logistic.quantile.summary$n*logistic.quantile.summary$retention.percentage
logistic.quantile.summary$cum.n.retained<-cumsum(logistic.quantile.summary$n.retained)
logistic.quantile.summary$cumlift<-(logistic.quantile.summary$cum.n.retained/logistic.quantile.summary$cum.n)/overall.responserate
plot(logistic.quantile.summary$quantile, logistic.quantile.summary$cumlift, type="l", lwd=5, xlab="quantile", ylab="cumulative lift",ylim=c(1,3), xlim=rev(range(logistic.quantile.summary$quantile)))
abline(1,0, col="red", lwd=5)
CDNow.logisticfit.int <- glm(retained ~ recency * Frequency + Monetary, data=CDNow.summary.all, family = "binomial")
summary(CDNow.logisticfit.int)
CDNow.summary.all$logisticfit.int <- predict(CDNow.logisticfit.int,type="response")
visreg(CDNow.logisticfit.int,"Frequency", by="recency", overlay="TRUE",  scale="response", xlim=c(1,20))
set.seed(12345)
cvFit(CDNow.logisticfit,y=CDNow.summary.all$retained, data=CDNow.summary.all,K=5, R=5)
cvFit(CDNow.logisticfit.int,y=CDNow.summary.all$retained, data=CDNow.summary.all,K=5, R=5)
setwd("C:/Users/The Law/Downloads/Academic/Semester 2/Customer Analytics/Cases/CD Now")
#IMPORT DATASET
pilgrim <- read.csv("pilgrim A.1 data.csv")
setwd("C:/Users/The Law/Downloads/Academic/Semester 2/Customer Analytics/Cases/Pilgrim Bank")
#IMPORT DATASET
pilgrim <- read.csv("pilgrim A.1 data.csv")
pilgrim.ordered <- pilgrim[order(-pilgrim$Profit99),] #sort customers in increasing order of Profit99
pilgrim.ordered$CumProfit99 <- cumsum((pilgrim.ordered$Profit99)/sum(pilgrim.ordered$Profit99)) #create column with cumulative percent of total Profit99
rm(list=ls())
setwd("C:/Users/The Law/Downloads/Academic/Semester 2/Customer Analytics/Cases/Pilgrim Bank")
#IMPORT DATASET
pilgrim <- read.csv("pilgrim A.1 data.csv")
View(pilgrim)
View(pilgrim)
pilgrim.ordered <- pilgrim[order(-pilgrim$Profit99),] #sort customers in increasing order of Profit99
View(pilgrim.ordered)
View(pilgrim.ordered)
pilgrim.ordered$CumProfit99 <- cumsum((pilgrim.ordered$Profit99)/sum(pilgrim.ordered$Profit99)) #create column with cumulative percent of total Profit99
pilgrim.ordered$customernumber <- seq(1:dim(pilgrim.ordered)[1])
pilgrim.ordered$customernumber <- seq(1:dim(pilgrim.ordered)[1])
pilgrim.ordered$cumpercentofcustomers <-pilgrim.ordered$customernumber/max(pilgrim.ordered$customernumber)
#whale plot
plot(x=pilgrim.ordered$cumpercentofcustomers, y=pilgrim.ordered$CumProfit99, type="l",
xlab="Percent of Customers",
ylab="Percent of Profit")
abline(h=1, col="blue")
#determine percentage of best customers needed to have same total profit
hundredprofit.customernumber<-min(pilgrim.ordered[pilgrim.ordered$CumProfit99>1,9])-1 #find customer number of first row where cum profit goes above 1 and subtract one
hundredprofit.percent <- pilgrim.ordered[hundredprofit.customernumber,10] #percent of customers responsible for 100% of profit
#percentage of best customers needed to maximize profit
maxprofit.percent<-pilgrim.ordered[match(max(pilgrim.ordered$CumProfit99), pilgrim.ordered$CumProfit99),10]
t.test(pilgrim$Profit99 ~ pilgrim$Online99, var.equal=TRUE)
#MODEL 1: INTERCEPT-ONLY MODEL
interceptOnly <-lm(Profit99 ~ 1 , data=pilgrim) #Estimate intercept-only regression model
summary(interceptOnly) #Analyze regression output
backgroundNoMissingContwithquad <-lm(Profit99 ~ Online99 + Tenure99 + Age99 + Inc99 + as.factor(District99) + I(Age99^2) + I(Inc99^2) , data=pilgrim)
summary(backgroundNoMissingContwithquad)
backgroundNoMissingContwithlog <-lm(Profit99 ~ Online99 + Tenure99 + Age99 + Inc99 + as.factor(District99) + I(log(Age99)) + I(log(Inc99)) , data=pilgrim)
summary(backgroundNoMissingContwithlog)
