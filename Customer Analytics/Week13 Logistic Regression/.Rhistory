}
if(df$artistProfNum[i] == '3729') {
# create a list of the songs in their playlist
vecTemp <- unlist(strsplit(df$targetPlaylist[i], ','))
# store average of how many of those are in the liberal songs thing
avg <- sum(vecTemp %in% setTwoConsSongs) / length(vecTemp)
averagesTemp[i] <- avg
}
}
# append averages into dataframe
df$targetPlaylistAvgCons <- averagesTemp
# descriptive stats ------------------------------------------
# K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.
# KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK
# participant's party ("party")
# participant's ideology ("ideology")
# composite ("subjLib")
# misc exploratory variables
# manip check on lib / conserv of other student ("othStuChars")
# should factor poliViews for own listening
# should factor poliViews for others listening
# impact of politics on self hearing the music
# impact of politics on others hearing the music
# good or bad to hear a diversity of political views in music
# age, income, gender, employment status
# charts -----------------------------------------------------
# K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.
# KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK
# misc exploratory variables
# song enjoyment
# perceived other's song enjoyment
# percevied poliThemes in music
# heard of artist before
#
# models / analyses ------------------------------------------
# K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.
# KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK
# create a "match" variable for whether their partisanship matches their target's
df$match <- ifelse(df$subjCons > 0 & df$targetCons > 0 | df$subjCons < 0 & df$targetCons < 0, .5, -.5)
# match model
summary(lm(targetPlaylistAvgCons ~ ownPlaylistAvgCons*match, data = df))
# visualize the collapsing
# generate correlations; firstWord = self, secondWord = target
libLib <-  cor(df[df$subjCons < 0  & df$targetCons < 0, c('ownPlaylistAvgCons', 'targetPlaylistAvgCons')])[2]
libCons <- cor(df[df$subjCons < 0  & df$targetCons > 0, c('ownPlaylistAvgCons', 'targetPlaylistAvgCons')])[2]
indLib <-  cor(df[df$subjCons == 0 & df$targetCons < 0, c('ownPlaylistAvgCons', 'targetPlaylistAvgCons')])[2]
indCons <- cor(df[df$subjCons == 0 & df$targetCons > 0, c('ownPlaylistAvgCons', 'targetPlaylistAvgCons')])[2]
consLib  <- cor(df[df$subjCons > 0 & df$targetCons < 0, c('ownPlaylistAvgCons', 'targetPlaylistAvgCons')])[2]
consCons <- cor(df[df$subjCons > 0 & df$targetCons > 0, c('ownPlaylistAvgCons', 'targetPlaylistAvgCons')])[2]
# create a table of them
correlations <- matrix(
data = c(libLib, indLib, consLib,
libCons, indCons, consCons),
nrow = 2, byrow = T,
dimnames = list(
c('Target Liberal', 'Target Conservative'),
c('Self Liberal', 'Self Independent', 'Self Conservative')
))
# chart them
barplot(correlations, beside = T, legend.text = T, args.legend = list(x = "bottomright"))
# create a "match" variable for whether their partisanship matches their target's
df$match <- ifelse(df$subjCons > 0 & df$targetCons > 0 | df$subjCons < 0 & df$targetCons < 0, .5, -.5)
#Analysis
#Hyptothesis 1
summary(lm(df$ownPlaylistAvgCons ~ df$subjCons +  df$selfFirst))
#Hypothesis 2
summary(lm(df$targetPlaylistAvgCons ~  df$targetCons + df$selfFirst))
#Hypothesis 3
summary(lm(targetPlaylistAvgCons ~ ownPlaylistAvgCons*match, data = df))
visreg((lm(ownPlaylistAvgCons ~ subjCons, data = df)), "subjCons")
library(isreg)
library(visreg)
visreg((lm(ownPlaylistAvgCons ~ subjCons, data = df)), "subjCons")
visreg((lm(targetPlaylistAvgCons ~ targetCons, data = df)), "targetCons")
#Hypothesis 3
fit <- summary(lm(targetPlaylistAvgCons ~ ownPlaylistAvgCons*match, data = df))
visreg(fit, "ownPLaylistAvgCons", "match", ylab= targetPlaylistAvgCons_
visreg(fit, "ownPLaylistAvgCons", "match", ylab= targetPlaylistAvgCons)
visreg(fit, "ownPLaylistAvgCons", "match", ylab= "targetPlaylistAvgCons")
visreg(fit, "ownPlaylistAvgCons", "match", ylab= "targetPlaylistAvgCons")
fit <- (lm(targetPlaylistAvgCons ~ ownPlaylistAvgCons*match, data = df))
visreg(fit, "ownPlaylistAvgCons", "match", ylab= "targetPlaylistAvgCons")
visreg(fit, "ownPlaylistAvgCons", ylab= "targetPlaylistAvgCons")
, "match"
visreg(fit, "ownPlaylistAvgCons", "match", ylab= "targetPlaylistAvgCons")
#Hypothesis 2
summary(lm(df$targetPlaylistAvgCons ~  df$targetCons + df$selfFirst))
# chart them
barplot(correlations, beside = T, legend.text = T, args.legend = list(x = "bottomright"))
# set up -----------------------------------------------------
# K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.
# KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK
rm(list=ls())
if(!is.null(dev.list())) dev.off()
cat("\014")
library(ggplot2)
library(visreg)
df <- read.csv("C:/Users/The Law/Downloads/Academic/Thesis/Data/06 - PartOverProd Songs LeafLab v1_March 22, 2018_17.03.csv")
# create codebook from original data
codeBook <- t(df[1,])
# write out and read in to auto-class variables
df <- df[-c(1, 2),]  # remove unnecessary lines
# write out df
write.csv(df, "C:/Users/The Law/Downloads/Academic/Thesis/Data/06 - PartOverProd Songs LeafLab v1_March 22, 2018_17.03.csv")
# read in df
df <- read.csv("C:/Users/The Law/Downloads/Academic/Thesis/Data/06 - PartOverProd Songs LeafLab v1_March 22, 2018_17.03.csv")
# remove if not finished
df <- subset(df, df$Finished == 1)
# drop people who don't have the right numbers
# artists
df <- subset(df, df$artistProfNum %in% c('1391', '3729'))
# target students
df <- subset(df, df$othStuProf %in% c('1832', '2461')) # 1832 = dem, 2461 = rep
# create composite variable of party and ideology (subjCons)
df$subjCons <- rowMeans(df[,c('party', 'ideology')])
# create target student ideology variable (targetLib)
df$targetCons <- ifelse(df$othStuProf == '2461', .5,
ifelse(df$othStuProf == '1832', -.5, NA))
# create playlist DVs | higher is more liberal ---------------
# K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.
# KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK
# vector of conservative songs for artistProfNum 1391
setOneConsSongs <- c(1, 3, 4, 6, 10)
# setOneLibSongs <- c(2, 5, 7, 8, 9)
# vector of conservative songs for artistProfNum 3729
setTwoConsSongs <- c(2, 5, 7, 8, 9)
# setTwoLibSongs <- c(1, 3, 4, 6, 10)
# own playlist avg
# create numeric variable
df$selfPlaylist <- as.character(df$selfPlaylist_0_GROUP)
# create a vector to fill
averagesTemp <- rep(NA, nrow(df))
for (i in 1:nrow(df)) {
# if they saw this set...
if(df$artistProfNum[i] == '1391') {
# create a list of the songs in their playlist
vecTemp <- unlist(strsplit(df$selfPlaylist[i], ','))
# store average of how many of those are in the liberal songs thing
avg <- sum(vecTemp %in% setOneConsSongs) / length(vecTemp)
averagesTemp[i] <- avg
}
# if they saw this set...
if(df$artistProfNum[i] == '3729') {
# create a list of the songs in their playlist
vecTemp <- unlist(strsplit(df$selfPlaylist[i], ','))
# store average of how many of those are in the liberal songs thing
avg <- sum(vecTemp %in% setTwoConsSongs) / length(vecTemp)
averagesTemp[i] <- avg
}
}
# append averages into dataframe
df$ownPlaylistAvgCons <- averagesTemp
# target student's playlist
# create numeric variable
df$targetPlaylist <- as.character(df$othPlaylist_0_GROUP)
# create a vector to fill
averagesTemp <- rep(NA, nrow(df))
for (i in 1:nrow(df)) {
if(df$artistProfNum[i] == '1391') {
# create a list of the songs in their playlist
vecTemp <- unlist(strsplit(df$targetPlaylist[i], ','))
# store average of how many of those are in the liberal songs thing
avg <- sum(vecTemp %in% setOneConsSongs) / length(vecTemp)
averagesTemp[i] <- avg
}
if(df$artistProfNum[i] == '3729') {
# create a list of the songs in their playlist
vecTemp <- unlist(strsplit(df$targetPlaylist[i], ','))
# store average of how many of those are in the liberal songs thing
avg <- sum(vecTemp %in% setTwoConsSongs) / length(vecTemp)
averagesTemp[i] <- avg
}
}
# append averages into dataframe
df$targetPlaylistAvgCons <- averagesTemp
# descriptive stats ------------------------------------------
# K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.
# KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK
# participant's party ("party")
# participant's ideology ("ideology")
# composite ("subjLib")
# misc exploratory variables
# manip check on lib / conserv of other student ("othStuChars")
# should factor poliViews for own listening
# should factor poliViews for others listening
# impact of politics on self hearing the music
# impact of politics on others hearing the music
# good or bad to hear a diversity of political views in music
# age, income, gender, employment status
# charts -----------------------------------------------------
# K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.
# KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK
# misc exploratory variables
# song enjoyment
# perceived other's song enjoyment
# percevied poliThemes in music
# heard of artist before
#
# models / analyses ------------------------------------------
# K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.
# KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK
# create a "match" variable for whether their partisanship matches their target's
df$match <- ifelse(df$subjCons > 0 & df$targetCons > 0 | df$subjCons < 0 & df$targetCons < 0, .5, -.5)
# match model
summary(lm(targetPlaylistAvgCons ~ ownPlaylistAvgCons*match, data = df))
# visualize the collapsing
# generate correlations; firstWord = self, secondWord = target
libLib <-  cor(df[df$subjCons < 0  & df$targetCons < 0, c('ownPlaylistAvgCons', 'targetPlaylistAvgCons')])[2]
libCons <- cor(df[df$subjCons < 0  & df$targetCons > 0, c('ownPlaylistAvgCons', 'targetPlaylistAvgCons')])[2]
indLib <-  cor(df[df$subjCons == 0 & df$targetCons < 0, c('ownPlaylistAvgCons', 'targetPlaylistAvgCons')])[2]
indCons <- cor(df[df$subjCons == 0 & df$targetCons > 0, c('ownPlaylistAvgCons', 'targetPlaylistAvgCons')])[2]
consLib  <- cor(df[df$subjCons > 0 & df$targetCons < 0, c('ownPlaylistAvgCons', 'targetPlaylistAvgCons')])[2]
consCons <- cor(df[df$subjCons > 0 & df$targetCons > 0, c('ownPlaylistAvgCons', 'targetPlaylistAvgCons')])[2]
# create a table of them
correlations <- matrix(
data = c(libLib, indLib, consLib,
libCons, indCons, consCons),
nrow = 2, byrow = T,
dimnames = list(
c('Target Liberal', 'Target Conservative'),
c('Self Liberal', 'Self Independent', 'Self Conservative')
))
# chart them
barplot(correlations, beside = T, legend.text = T, args.legend = list(x = "bottomright"))
visreg((lm(ownPlaylistAvgCons ~ subjCons, data = df)), "subjCons")
visreg((lm(targetPlaylistAvgCons ~ targetCons, data = df)), "targetCons")
ggplot(df, aes(f0)) +
geom_bar(data = df$ownPlaylistAvgCons, fill = "red", alpha = 0.2) +
geom_bar(data = df$targetPlaylistAvgCons, fill = "blue", alpha = 0.2)
ggplot(df, aes(f0)) +
geom_bar(data = df$ownPlaylistAvgCons, fill = "red", alpha = 0.2) +
geom_bar(data = df$targetPlaylistAvgCons, fill = "blue", alpha = 0.2)
# chart them
barplot(correlations, beside = T, legend.text = T, args.legend = list(x = "bottomright"))
library(ggplot)
library(ggplot2)
library(ggplot2)
ggplot(df, aes(f0)) +
geom_bar(data = df$ownPlaylistAvgCons, fill = "red", alpha = 0.2) +
geom_bar(data = df$targetPlaylistAvgCons, fill = "blue", alpha = 0.2)
ggplot(df, aes(f0)) +
geom_chart(data = df$ownPlaylistAvgCons, fill = "red", alpha = 0.2) +
geom_chart(data = df$targetPlaylistAvgCons, fill = "blue", alpha = 0.2)
ggplot(df,aes(f0)) +
geom_col(data = df$ownPlaylistAvgCons, fill = "red", alpha = 0.2) +
geom_col(data = df$targetPlaylistAvgCons, fill = "blue", alpha = 0.2)
# set up -----------------------------------------------------
# K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.
# KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK
rm(list=ls())
if(!is.null(dev.list())) dev.off()
cat("\014")
library(ggplot2)
library(visreg)
df <- read.csv("C:/Users/The Law/Downloads/Academic/Thesis/Data/06 - PartOverProd Songs LeafLab v1_April 3, 2018_11.24.csv")
# create codebook from original data
codeBook <- t(df[1,])
# write out and read in to auto-class variables
df <- df[-c(1, 2),]  # remove unnecessary lines
# write out df
write.csv(df, "C:/Users/The Law/Downloads/Academic/Thesis/Data/06 - PartOverProd Songs LeafLab v1_April 3, 2018_11.24AUTOCLASS.csv")
# read in df
df <- read.csv("C:/Users/The Law/Downloads/Academic/Thesis/Data/06 - PartOverProd Songs LeafLab v1_April 3, 2018_11.24AUTOCLASS.csv")
# remove if not finished
df <- subset(df, df$Finished == 1)
# drop people who don't have the right numbers
# artists
df <- subset(df, df$artistProfNum %in% c('1391', '3729'))
# target students
df <- subset(df, df$othStuProf %in% c('1832', '2461')) # 1832 = dem, 2461 = rep
# create composite variable of party and ideology (subjCons)
df$subjCons <- rowMeans(df[,c('party', 'ideology')])
# create target student ideology variable (targetLib)
df$targetCons <- ifelse(df$othStuProf == '2461', .5,
ifelse(df$othStuProf == '1832', -.5, NA))
# create playlist DVs | higher is more liberal ---------------
# K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.
# KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK
# vector of conservative songs for artistProfNum 1391
setOneConsSongs <- c(1, 3, 4, 6, 10)
# setOneLibSongs <- c(2, 5, 7, 8, 9)
# vector of conservative songs for artistProfNum 3729
setTwoConsSongs <- c(2, 5, 7, 8, 9)
# setTwoLibSongs <- c(1, 3, 4, 6, 10)
# own playlist avg
# create numeric variable
df$selfPlaylist <- as.character(df$selfPlaylist_0_GROUP)
# create a vector to fill
averagesTemp <- rep(NA, nrow(df))
for (i in 1:nrow(df)) {
# if they saw this set...
if(df$artistProfNum[i] == '1391') {
# create a list of the songs in their playlist
vecTemp <- unlist(strsplit(df$selfPlaylist[i], ','))
# store average of how many of those are in the liberal songs thing
avg <- sum(vecTemp %in% setOneConsSongs) / length(vecTemp)
averagesTemp[i] <- avg
}
# if they saw this set...
if(df$artistProfNum[i] == '3729') {
# create a list of the songs in their playlist
vecTemp <- unlist(strsplit(df$selfPlaylist[i], ','))
# store average of how many of those are in the liberal songs thing
avg <- sum(vecTemp %in% setTwoConsSongs) / length(vecTemp)
averagesTemp[i] <- avg
}
}
# append averages into dataframe
df$ownPlaylistAvgCons <- averagesTemp
# target student's playlist
# create numeric variable
df$targetPlaylist <- as.character(df$othPlaylist_0_GROUP)
# create a vector to fill
averagesTemp <- rep(NA, nrow(df))
for (i in 1:nrow(df)) {
if(df$artistProfNum[i] == '1391') {
# create a list of the songs in their playlist
vecTemp <- unlist(strsplit(df$targetPlaylist[i], ','))
# store average of how many of those are in the liberal songs thing
avg <- sum(vecTemp %in% setOneConsSongs) / length(vecTemp)
averagesTemp[i] <- avg
}
if(df$artistProfNum[i] == '3729') {
# create a list of the songs in their playlist
vecTemp <- unlist(strsplit(df$targetPlaylist[i], ','))
# store average of how many of those are in the liberal songs thing
avg <- sum(vecTemp %in% setTwoConsSongs) / length(vecTemp)
averagesTemp[i] <- avg
}
}
# append averages into dataframe
df$targetPlaylistAvgCons <- averagesTemp
# descriptive stats ------------------------------------------
# K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.
# KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK
# participant's party ("party")
# participant's ideology ("ideology")
# composite ("subjLib")
# misc exploratory variables
# manip check on lib / conserv of other student ("othStuChars")
# should factor poliViews for own listening
# should factor poliViews for others listening
# impact of politics on self hearing the music
# impact of politics on others hearing the music
# good or bad to hear a diversity of political views in music
# age, income, gender, employment status
# charts -----------------------------------------------------
# K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.
# KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK
# misc exploratory variables
# song enjoyment
# perceived other's song enjoyment
# percevied poliThemes in music
# heard of artist before
#
# models / analyses ------------------------------------------
# K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.
# KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK
# create a "match" variable for whether their partisanship matches their target's
df$match <- ifelse(df$subjCons > 0 & df$targetCons > 0 | df$subjCons < 0 & df$targetCons < 0, .5, -.5)
# match model
summary(lm(targetPlaylistAvgCons ~ ownPlaylistAvgCons*match, data = df))
# visualize the collapsing
# generate correlations; firstWord = self, secondWord = target
libLib <-  cor(df[df$subjCons < 0  & df$targetCons < 0, c('ownPlaylistAvgCons', 'targetPlaylistAvgCons')])[2]
libCons <- cor(df[df$subjCons < 0  & df$targetCons > 0, c('ownPlaylistAvgCons', 'targetPlaylistAvgCons')])[2]
indLib <-  cor(df[df$subjCons == 0 & df$targetCons < 0, c('ownPlaylistAvgCons', 'targetPlaylistAvgCons')])[2]
indCons <- cor(df[df$subjCons == 0 & df$targetCons > 0, c('ownPlaylistAvgCons', 'targetPlaylistAvgCons')])[2]
consLib  <- cor(df[df$subjCons > 0 & df$targetCons < 0, c('ownPlaylistAvgCons', 'targetPlaylistAvgCons')])[2]
consCons <- cor(df[df$subjCons > 0 & df$targetCons > 0, c('ownPlaylistAvgCons', 'targetPlaylistAvgCons')])[2]
# create a table of them
correlations <- matrix(
data = c(libLib, indLib, consLib,
libCons, indCons, consCons),
nrow = 2, byrow = T,
dimnames = list(
c('Target Liberal', 'Target Conservative'),
c('Self Liberal', 'Self Independent', 'Self Conservative')
))
# chart them
barplot(correlations, beside = T, legend.text = T, args.legend = list(x = "bottomright"))
#Dareck's Code ----
#Analysis
#Hyptothesis 1
summary(lm(df$ownPlaylistAvgCons ~ df$subjCons +  df$selfFirst))
visreg((lm(ownPlaylistAvgCons ~ subjCons, data = df)), "subjCons")
#Hypothesis 2
summary(lm(df$targetPlaylistAvgCons ~  df$targetCons + df$selfFirst))
visreg((lm(targetPlaylistAvgCons ~ targetCons, data = df)), "targetCons")
#Hypothesis 3
summary(lm(targetPlaylistAvgCons ~ ownPlaylistAvgCons*match, data = df))
fit <- (lm(targetPlaylistAvgCons ~ ownPlaylistAvgCons*match, data = df))
visreg(fit, "ownPlaylistAvgCons", "match", ylab= "targetPlaylistAvgCons")
visreg(fit, "ownPlaylistAvgCons", "match", ylab= "targetPlaylistAvgCons", overlay = TRUE)
h1 <- visreg((lm(ownPlaylistAvgCons ~ subjCons, data = df)), "subjCons")
h2 <- isreg((lm(targetPlaylistAvgCons ~ targetCons, data = df)), "targetCons")
h2 <- visreg((lm(targetPlaylistAvgCons ~ targetCons, data = df)), "targetCons")
visreg(h1,h2,  Overlay = TRUE)
h <- (h1,h2)
h <- (h1 + h2)
h <- (h1, h2)
visreg((lm(targetPlaylistAvgCons ~ targetCons, data = df)), "targetCons")
h2 <- visreg((lm(targetPlaylistAvgCons ~ targetCons, data = df)), "targetCons")
#Hypothesis 2
summary(lm(df$targetPlaylistAvgCons ~  df$targetCons + df$selfFirst))
visreg((lm(targetPlaylistAvgCons ~ targetCons, data = df)), "targetCons")
#Analysis
#Hyptothesis 1
summary(lm(df$ownPlaylistAvgCons ~ df$subjCons +  df$selfFirst))
visreg((lm(ownPlaylistAvgCons ~ subjCons, data = df)), "subjCons")
visreg(fit, "ownPlaylistAvgCons", "match", ylab= "targetPlaylistAvgCons", overlay = TRUE)
rm(list=ls())
library(dplyr)
setwd("C:/Users/The Law/Downloads/Academic/Semester 2/Customer Analytics/Cases/CD Now")
cd <- read.csv("CDNOW Restructured.csv")
#SET WORKING DIRECTORY
setwd("C:/Users/The Law/Downloads/Academic/Semester 2/Customer Analytics/Week13 Logistic Regression")
#IMPORT DATASET
transactions <- read.csv("transactions2.csv")
View(transactions)
View(transactions)
#install.packages("ggplot2")
library(ggplot2)
ggplot(transactions, aes(x = Order_Quantity)) + geom_histogram(binwidth = 10, fill = "black") + labs(x="Order Quantity", y = "Frequency")
library(visreg)
wrong_allpredictors <- lm(Order_Quantity ~ Gender + Married + Income + Loyalty +
Lag_Purchase + Lag_Order_Quantity, data=transactions)
summary(wrong_allpredictors)
transactions$wrong_allpredictors <- predict(wrong_allpredictors, transactions, type="response")
View(wrong_allpredictors)
View(wrong_allpredictors)
summary(wrong_allpredictors)
transactions$wrong_allpredictors <- predict(wrong_allpredictors, transactions, type="response")
View(transactions)
View(transactions)
#create new variable
transactions$Purchase <- ifelse(transactions$Order_Quantity == 0, 0, 1)
linear_allpredictors <- lm(Purchase ~ Gender + Married + Income + Loyalty +
Lag_Purchase + Lag_Order_Quantity, data=transactions)
summary(linear_allpredictors)
transactions$linear_allpredictors <- predict(linear_allpredictors, transactions, type="response")
plot(transactions$Lag_Purchase, transactions$linear_allpredictors)
plot(transactions$Lag_Order_Quantity, transactions$linear_allpredictors)
logit_allpredictors <- glm(Purchase ~ Gender + Married + Income + Loyalty +
Lag_Purchase + Lag_Order_Quantity, data=transactions, family="binomial")
summary(logit_allpredictors)
transactions$logit_allpredictors <- predict(logit_allpredictors, transactions, type="response")
plot(transactions$Lag_Purchase, transactions$logit_allpredictors)
plot(transactions$Lag_Order_Quantity, transactions$logit_allpredictors)
transactions$logit_allpredictors <- predict(logit_allpredictors, transactions, type="response")
plot(transactions$Lag_Purchase, transactions$logit_allpredictors)
plot(transactions$Lag_Order_Quantity, transactions$logit_allpredictors)
linear_allpredictors_spend <- lm(Order_Quantity ~ Gender + Married + Income + Loyalty +
Lag_Purchase + Lag_Order_Quantity, data=subset(transactions,Purchase==1))
summary(linear_allpredictors_spend)
transactions$linear_allpredictors_spend <- predict(linear_allpredictors_spend, transactions, type="response")
plot(transactions$Lag_Purchase, transactions$linear_allpredictors_spend)
plot(transactions$Lag_Order_Quantity, transactions$linear_allpredictors_spend)
plot(transactions$Income, transactions$linear_allpredictors_spend)
plot(transactions$Gender, transactions$linear_allpredictors_spend)
#combine models to predict future spend
transactions$future_spend_predict <- transactions$logit_allpredictors*transactions$linear_allpredictors_spend
plot(transactions$Lag_Purchase, transactions$future_spend_predict)
plot(transactions$Lag_Order_Quantity, transactions$future_spend_predict)
plot(transactions$wrong_allpredictors, transactions$future_spend_predict, xlim=range(0:400), ylim=range(0:400))
View(cd)
View(cd)
summary(lm(cd$retained ~ cd$Monetary + cd$Frequency + cd$recency))
linear_predictions <- summary(lm(cd$retained ~ cd$Monetary + cd$Frequency + cd$recency))
#predict retention from model
cd$linear_predictions <- predict(linear_predictions, cd, type="response")
#predict retention from model
cd$linear_predictions <- predict(linear_predictions, cd, type="response")
linear_predictions <- lm(cd$retained ~ cd$Monetary + cd$Frequency + cd$recency)
#predict retention from model
cd$linear_predictions <- predict(linear_predictions, cd, type="response")
library(ggplot2)
#graph linear predictions as a funnction of recency
plot(cd$recency, cd$linear_predictions)
#graph linear predictions as a funnction of frequency
plot(cd$Frequency, cd$linear_predictions)
#Linear Regression
#Predicting retained
summary(lm(cd$retained ~ cd$Monetary + cd$Frequency + cd$recency))
linear_predictions_retained <- lm(cd$retained ~ cd$Monetary + cd$Frequency + cd$recency)
#predict retention from model
cd$linear_predictions <- predict(linear_predictions_retained, cd, type="response")
#graph linear predictions as a funnction of recency
plot(cd$recency, cd$linear_predictions_retained)
#graph linear predictions as a funnction of frequency
plot(cd$Frequency, cd$linear_predictions_retained)
#predict retention from model
cd$linear_predictions_retained <- predict(linear_predictions_retained, cd, type="response")
#graph linear predictions as a funnction of recency
plot(cd$recency, cd$linear_predictions_retained)
#graph linear predictions as a funnction of frequency
plot(cd$Frequency, cd$linear_predictions_retained)
#graph linear predictions as a funnction of monetary
plot(cd$Monetary, cd$linear_predictions_retained)
#Logistic Regression
#Predicting Retained
summary(glm(cd$retained ~ cd$Monetary + cd$Frequency + cd$recency, family ="binomial"))
logistic_predictions_retained <- glm(cd$retained ~ cd$Monetary + cd$Frequency + cd$recency, fammily = "binomial")
logistic_predictions_retained <- glm(cd$retained ~ cd$Monetary + cd$Frequency + cd$recency, family = "binomial")
#predict retention from logistic model
cd$logistic_predictions_retained <- predict(logistic_predictions_retained, cd, type = "response")
#graph retention from logistic model
plot(cd$recency, cd$logistic_predictions_retained)
#graph logit predictions as a function of frequency
plot(cd$Frequency, cd$logistic_predictions_retained)
#graph logit predictions as a function of monetary
plot(cd$Monetary, cd$logistic_predictions_retained)
