LetterGrades <- "D"
} else{
LetterGrades <- "F"
}
}
for (i in NumGrades[i]) {
if (NumGrades[i] >= 90) {
LetterGrades[i] <- "A"
} else if (NumGrades[i] >= 80){
LetterGrades[i] <- "B"
} else if (NumGrades[i] >= 70) {
LetterGrades[i] <- "C"
} else if (NumGrades[i] >= 60) {
LetterGrades[i] <- "D"
} else{
LetterGrades[i] <- "F"
}
}
if (NumGrades[i] >= 90) {
LetterGrades[i] <- "A"
} else if (NumGrades[i] >= 80){
LetterGrades[i] <- "B"
} else if (NumGrades[i] >= 70) {
LetterGrades[i] <- "C"
} else if (NumGrades[i] >= 60) {
LetterGrades[i] <- "D"
} else{
LetterGrades[i] <- "F"
}
if (NumGrades[i] >= 90) {
LetterGrades[i] <- "A"
} else if (NumGrades[i] >= 80){
LetterGrades[i] <- "B"
} else if (NumGrades[i] >= 70) {
LetterGrades[i] <- "C"
} else if (NumGrades[i] >= 60) {
LetterGrades[i] <- "D"
} else{
LetterGrades[i] <- "F"
}
for (i in NumGrades[i]) {
if (NumGrades[i] >= 90) {
LetterGrades[i] <- "A"
} else if (NumGrades[i] >= 80){
LetterGrades[i] <- "B"
} else if (NumGrades[i] >= 70) {
LetterGrades[i] <- "C"
} else if (NumGrades[i] >= 60) {
LetterGrades[i] <- "D"
} else{
LetterGrades[i] <- "F"
}}
seq(from = 4, by = 8, length.out = 3)
rep(seq(from = 4, by = 8, length.out = 3), length.out = 2.5)
rep(seq(from = 4, by = 8, length.out = 3), length.out = 8)
a <- seq(from = 1, to = 10)
a <- seq(from = 1, to = 10, length.out = 50)
#print a
print(a)
a <- seq(from = 1, to = 10, by = 1)
a
?sample()
a <- sample(seq(from = 1, to = 10, by = 1), 50, replace = TRUE)
a
a[a > 7] <- 99
a
print(a)
sd(sample(seq(from = 0, to = 10, by = 1), 1000, replace = TRUE)))
sd(sample(seq(from = 0, to = 10, by = 1), 1000, replace = TRUE))
b <- 5
for (i in b) {
if b > 5 {
print("It's Larger Than 5")
} else if b == 5{
b <- 10
} else {
print("It's Smaller than 5")
}
}
if b > 5 {
print("It's Larger Than 5")
} else if b == 5{
b <- 10
} else {
print("It's Smaller than 5")
}
if b > 5 {
print("It's Larger Than 5")
} else if b == 5{
b <- 10
} else {
print("It's Smaller than 5")
}
if b > 5 {
print("It's Larger Than 5")
} else if b == 5{
b <- 10
} else {
print("It's Smaller than 5")
}
if (b > 5) {
print("It's Larger Than 5")
} else if (b == 5){
(b <- 10)
} else {
print("It's Smaller than 5")
}
if (b > 5) {
print("It's Larger Than 5")
} else if (b == 5){
(b <- 10)
} else {
print("It's Smaller than 5")
}
b <- 5
if (b > 5) {
print("It's Larger Than 5")
} else if (b < 5){
print("It's Smaller Than 5")
} else {
(b <- 10)
}
b <- 7
if (b > 5) {
print("It's Larger Than 5")
} else if (b < 5){
print("It's Smaller Than 5")
} else {
(b <- 10)
}
b <- 4
if (b > 5) {
print("It's Larger Than 5")
} else if (b < 5){
print("It's Smaller Than 5")
} else {
(b <- 10)
}
height <- sample(seq(from = 54, to = 78, by = 1), 25, replace = TRUE)
short <- seq(from = 1, to = inf)
short <- seq(from = 1, to = 100)
short <- seq(from = 1, to = length(short))
tall <-  seq(from = 1, to length(tall))
short <- seq(from = 1, to = length(height))
tall <-  seq(from = 1, to length(height))
tall <-  seq(from = 1, to = length(tall))
tall <-  seq(from = 1, to = length(height))
average < - seq(from = 1, to = length(height))
avg < - seq(from = 1, to = length(height))
avg <- seq(from = 1, to = length(height))
avg[i] <- height[i]
height <- sample(seq(from = 54, to = 78, by = 1), 25, replace = TRUE) #people can be the same height
short <- seq(from = 1, to = length(height))
tall <-  seq(from = 1, to = length(height))
avg <- seq(from = 1, to = length(height))
For (i to 1:length(height)) {
if (height[i] < 60) {
short[i] <- height[i]
} else if (height[i] > 72) {
tall[i] <- height[i]
} else {
avg[i] <- height[i]
}
}
For (i to 1:length(height)) {
if (height[i] < 60) {
(short[i] <- height[i])
} else if (height[i] > 72) {
(tall[i] <- height[i])
} else {
(avg[i] <- height[i])
}
}
For (i in 1:length(height)) {
if (height[i] < 60) {
(short[i] <- height[i])
} else if (height[i] > 72) {
(tall[i] <- height[i])
} else {
(avg[i] <- height[i])
}
}
For (i in 1:length(height)) {
if (height[i] < 60) {
(short[i] <- height[i])
} else if (height[i] > 72) {
(tall[i] <- height[i])
} else {
(avg[i] <- height[i])
}
}
# for loop to convert grades
for (i in 1:length(numGrades)) {
if (numGrades[i] >= 90) {
letterGrades[i] <- "A"
} else if (numGrades[i] >= 80) {
letterGrades[i] <- "B"
} else if (numGrades[i] >= 70) {
letterGrades[i] <- "C"
} else if (numGrades[i] >= 60) {
letterGrades[i] <- "D"
} else {
letterGrades[i] <- "F"
}
}
# initialize letter grade vector
letterGrades <- rep(NA, length.out=length(numGrades))
# for loop to convert grades
for (i in 1:length(numGrades)) {
if (numGrades[i] >= 90) {
letterGrades[i] <- "A"
} else if (numGrades[i] >= 80) {
letterGrades[i] <- "B"
} else if (numGrades[i] >= 70) {
letterGrades[i] <- "C"
} else if (numGrades[i] >= 60) {
letterGrades[i] <- "D"
} else {
letterGrades[i] <- "F"
}
}
numGrades <- sample(50:100, size=100, replace=TRUE)
# initialize letter grade vector
letterGrades <- rep(NA, length.out=length(numGrades))
# for loop to convert grades
for (i in 1:length(numGrades)) {
if (numGrades[i] >= 90) {
letterGrades[i] <- "A"
} else if (numGrades[i] >= 80) {
letterGrades[i] <- "B"
} else if (numGrades[i] >= 70) {
letterGrades[i] <- "C"
} else if (numGrades[i] >= 60) {
letterGrades[i] <- "D"
} else {
letterGrades[i] <- "F"
}
}
library(ggplot2)
For (i in 1:length(height)) {
if (height[i] < 60) {
(short[i] <- height[i])
} else if (height[i] > 72) {
(tall[i] <- height[i])
} else {
(avg[i] <- height[i])
}
}
For (i in 1:length(height)) {
if (height[i] <= 60) {
(short[i] <- height[i])
} else if (height[i] >= 72) {
(tall[i] <- height[i])
} else {
(avg[i] <- height[i])
}
}
height <- sample(seq(from = 54, to = 78, by = 1), 25, replace = TRUE) #people can be the same height
short <- seq(from = 1, to = length(height))
tall <-  seq(from = 1, to = length(height))
avg <- seq(from = 1, to = length(height))
for (i in 1:length(height)) {
if (height[i] > 72) {
tall[i] <- height[i]
} else if (height[i] < 60) {
short[i] <- height[i]
} else {
avgt[i] <- height[i]
}
}
for (i in 1:length(height)) {
if (height[i] > 72) {
tall[i] <- height[i]
} else if (height[i] < 60) {
short[i] <- height[i]
} else {
avg[i] <- height[i]
}
}
catheight <- rep(NA, length.out=length(numGrades))
height <- sample(seq(from = 54, to = 78, by = 1), 25, replace = TRUE) #people can be the same height
catheight <- rep(NA, length.out=length(numGrades))
for (i in 1:length(height)) {
if (height[i] > 72) {
catheight[i] <- "Tall"
} else if (height[i] < 60) {
catheight[i] <- "Short"
} else {
catheight[i] <- "Average"
}
}
height <- sample(seq(from = 54, to = 78, by = 1), 25, replace = TRUE) #people can be the same height
catheight <- rep(NA, length.out=length(numGrades)) #a vector for categories of height: short, tall over average
for (i in 1:length(height)) {
if (height[i] > 72) {
catheight[i] <- "Tall"
} else if (height[i] < 60) {
catheight[i] <- "Short"
} else {
catheight[i] <- "Average"
}
}
#Loading Diamonds
library(ggplot2)
diamonds <- as.data.frame(diamonds)
df <- subset(diamonds, cut == "Ideal")
View(df)
View(df)
length(df)
rowlength(df)
nrow(df)
nrow(diamonds)
prem <- subset(diamonds, cut == "Premium")
View(diamonds)
View(diamonds)
premE <- subset(prem, color = "E")
View(premE)
View(premE)
premE <- subset(prem, color == "E")
median(premE$price)
hist(subset(diamonds, carats > 2), xlab = "Price")
hist(subset(diamonds, carat > 2), xlab = "Price")
hist(subset(diamonds, carat > 2), xlab = price)
hist(subset(diamonds, carat > 2), xlab = diamonds$price)
diamonds$price <- as.numeric(as.character(diamonds$price))
hist(subset(diamonds, carat > 2), xlab = diamonds$price)
hist(subset(diamonds, carat > 2))
subset(diamonds, carat > 2)
hist(subset(diamonds, carat > 2))
hist(subset(diamonds, carat > 2), x = diamonds$price)
diamonds$carat <- as.numeric(as.character(diamonds$carat))
diamonds$price <- as.numeric(as.character(diamonds$price))
hist(subset(diamonds, carat > 2), x = diamonds$price)
hist(subset(diamonds, carat > 2))
setwd("C:/Users/The Law/Downloads/Academic/Semester 2/Customer Analytics/Week08 Midterm")
seg <- read.csv("TenSegments.csv")
View(seg)
View(seg)
seg$Discount <- .1
seg$CLV <- ((seg$Margin*(1 + seg$Discount))/( 1 + seg$Discount - seg$RetentionRate)) - seg$AcquisitionCost
negCLV <- rep(na)
negCLV <- rep(NA)
negCLV <- rep(NA)
for (i in 1:length(seg$CLV)) {
if (seg$CLV[i] < 0) {
negCLV[i] <- seg$CLV[i]
} else {
}
}
print(negCLV)
negCLV <- rep(NA, length.out = negCLV < 0)
for (i in 1:length(seg$CLV)) {
if (seg$CLV[i] < 0) {
negCLV[i] <- seg$CLV[i]
} else {
}
}
print(negCLV)
negCLV <- rep(NA)
for (i in 1:length(seg$CLV)) {
if (seg$CLV[i] < 0) {
negCLV[i] <- seg$CLV[i]
} else {
}
}
print(negCLV)
negCLV <- rep(NA, length.out = 4)
for (i in 1:length(seg$CLV)) {
if (seg$CLV[i] < 0) {
negCLV[i] <- seg$CLV[i]
} else {
}
}
print(negCLV)
if (seg$CLV[i] < 0) {
negCLV[i] <- seg$CLV[i]
}
negCLV <- rep(NA, length.out = 4)
for (i in 1:length(seg$CLV)) {
if (seg$CLV[i] < 0) {
negCLV[i] <- seg$CLV[i]
}
}
print(negCLV)
negCLV <- rep(NA, length.out = 4)
for (i in 1:length(seg$CLV)) {
if (seg$CLV[i] < 0) {
negCLV[i] <- seg$CLV[i]
} else {
}
}
print(negCLV)
sort(seg$CLV, descending = FALSE)
sort(seg$CLV, decreasing = FALSE)
sort(seg$CLV, decreasing = TRUE)
#Bonus Point
head(sort(seg$CLV, decreasing = TRUE), n = 3)
?order()
#Bonus Point
seg[order(seg$CLV,)]
#Bonus Point
seg[order(CLV,)]
#Bonus Point
seg[order(seg$CLV,)]
#Bonus Point
seg[order(seg$CLV, )]
#Bonus Point
sort.lisit(seg$CLV, decreasing = TRUE)
#Bonus Point
sort.list(seg$CLV, decreasing = TRUE)
#Bonus Point
sort.list(seg$CLV, decreasing = TRUE, method = c(TRUE))
#Bonus Point
sort.list(seg$CLV, decreasing = TRUE, method = c("shell"))
hist(subset(diamonds, carat > 2))
c <- subset(diamonds, carat > 2)
hist(c)
View(c)
View(c)
c <- subset(c, select = -c(1:6, 8:10)
c <- subset(c, select = -c(1:6, 8:10))
caratvec <- subset(diamonds, carat > 2)
caratvector <- subset(caratvector, select = -c(1:6, 8:10))
caratvec <- subset(diamonds, carat > 2)
caratvec <- subset(caratvec, select = -c(1:6, 8:10))
View(caratvec)
View(caratvec)
hist(caratvec)
caratvec$price <- as.numeric(as.character(caratvec$price))
hist(caratvec)
hist(caratvec$price)
#Bonus Point
seg[order(CLV),]
#Bonus Point
seg[order(seg$CLV),]
#Bonus Point
head(seg[order(seg$CLV),], n = 3)
subset(seg$AcquisitionCost, head(seg[order(seg$CLV),], n = 3))
subset(head(seg[order(seg$CLV),], n = 3))
subset(head(seg[order(seg$CLV),], n = 3), AcquistionCost)
subset(head(seg[order(seg$CLV),], n = 3), AcquisionCost)
subset(head(seg[order(seg$CLV),], n = 3), AcquisitionCost)
head(seg[order(seg$CLV),], n = 3)[,2]
mean(head(seg[order(seg$CLV),], n = 3)[,2])
negCLV <- rep(NA, length.out = 4) #blank vector
for (i in 1:length(seg$CLV)) {
if (seg$CLV[i] < 0) {
negCLV[i] <- seg$CLV[i]
} else {
}
}
print(negCLV)
mean(head(seg[order(seg$CLV),], n = 3)[,2])
rep(seq(from = 4, by = 8, length.out = 3), length.out = 8)
a <- sample(seq(from = 1, to = 10, by = 1), 50, replace = TRUE)
a[a > 7] <- 99
print(a)
sd(sample(seq(from = 0, to = 10, by = 1), 1000, replace = TRUE))
b <- 4
if (b > 5) {
print("It's Larger Than 5")
} else if (b < 5){
print("It's Smaller Than 5")
} else {
(b <- 10)
}
height <- sample(seq(from = 54, to = 78, by = 1), 25, replace = TRUE) #people can be the same height
catheight <- rep(NA, length.out=length(numGrades)) #a vector for categories of height: short, tall over average
for (i in 1:length(height)) {
if (height[i] > 72) {
catheight[i] <- "Tall"
} else if (height[i] < 60) {
catheight[i] <- "Short"
} else {
catheight[i] <- "Average"
}
}
library(ggplot2)
diamonds <- as.data.frame(diamonds)
df <- subset(diamonds, cut == "Ideal") #dataframe of only ideal cut diamonds
nrow(df) #calculates number of diamonds in dataframe with only ideal cut diamonds
nrow(diamonds) #calculates number of diamonds in dataframe with all diamonds
prem <- subset(diamonds, cut == "Premium") #subsets only oremmium diamonds
premE <- subset(prem, color == "E") #subsets premium diamonds with color E
median(premE$price) #calculates median price of premium E diamonds
caratvec <- subset(diamonds, carat > 2)
caratvec <- subset(caratvec, select = -c(1:6, 8:10))
caratvec$price <- as.numeric(as.character(caratvec$price))
hist(caratvec$price)
setwd("C:/Users/The Law/Downloads/Academic/Semester 2/Customer Analytics/Week08 Midterm")
seg <- read.csv("TenSegments.csv")
seg$Discount <- .1
seg$CLV <- ((seg$Margin*(1 + seg$Discount))/( 1 + seg$Discount - seg$RetentionRate)) - seg$AcquisitionCost #calc CLV
negCLV <- rep(NA, length.out = 4) #blank vector
for (i in 1:length(seg$CLV)) {
if (seg$CLV[i] < 0) {
negCLV[i] <- seg$CLV[i]
} else {
}
}
print(negCLV)
mean(head(seg[order(seg$CLV),], n = 3)[,2])
mean(head(seg[order(seg$CLV),], n = 3)[,2])
for (i in 1:length(seg$CLV)) {
if (seg$CLV[i] < 0) {
negCLV[i] <- seg$CLV[i]
} else {
}
}
print(negCLV)
View(seg)
View(seg)
